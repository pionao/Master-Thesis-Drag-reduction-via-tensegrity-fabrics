!USE rtchecks

USE import_routine
USE meanandvar

FILE savedfield

INTEGER nfmin, nfmax
ASK nfmin, nfmax

INTEGER nx,ny,nz,it
REAL Lx,Ly,nu,deltat,headx,heady,t

output_folder_path = "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/"

VARS=STRUCTURED ARRAY(p,u,v,w) OF REAL
savedfield=OPENRO(output_folder_path"field_output/undwall_0.field")
READ BY NAME FROM savedfield nx,ny,nz,Lx,Ly,nu,deltat
ARRAY[1..nx,1..ny,0..nz] OF VARS var=0
CLOSE savedfield

SUBROUTINE X_comp(ARRAY(*) OF REAL X^; ARRAY(*) OF REAL X_0; ARRAY(*) OF REAL q_tilde; ARRAY(*,*) OF INTEGER ghost_nodes; REAL l_b, l_per; INTEGER nx_t, nz_t, n_N, n_G)

    LOOP FOR i = 1 TO FLOOR((n_N-n_G)/2)
        X(3*i-2) = X_0(3*i-2+3*FLOOR((n_N-n_G)/2)) + l_b*SIN(q_tilde(2*i-1+(n_N-n_G)))*COS(q_tilde(2*i+(n_N-n_G)))
        X(3*i-1) = X_0(3*i-1+3*FLOOR((n_N-n_G)/2)) + l_b*SIN(q_tilde(2*i-1+(n_N-n_G)))*SIN(q_tilde(2*i+(n_N-n_G)))
        X(3*i)   = X_0(3*i  +3*FLOOR((n_N-n_G)/2)) + l_b*COS(q_tilde(2*i-1+(n_N-n_G)))
    REPEAT

    LOOP FOR i = 1 TO n_G
        ghost_ind  = ghost_nodes(i, 1)
        parent_ind = ghost_nodes(i, 2)
        per_dir    = ghost_nodes(i, 3)

        IF per_dir = 1 THEN
            X(3*ghost_ind-2) = X(3*parent_ind-2) - nx*l_per
            X(3*ghost_ind-1) = X(3*parent_ind-1) 
            X(3*ghost_ind)   = X(3*parent_ind)
        ELSE IF per_dir = 2 THEN
            X(3*ghost_ind-2) = X(3*parent_ind-2) 
            X(3*ghost_ind-1) = X(3*parent_ind-1)
            X(3*ghost_ind)   = X(3*parent_ind)   - nz*l_per
        ELSE IF per_dir = 3 THEN
            X(3*ghost_ind-2) = X(3*parent_ind-2) 
            X(3*ghost_ind-1) = X(3*parent_ind-1)
            X(3*ghost_ind)   = X(3*parent_ind)   + nz*l_per
        ELSE IF per_dir = 4 THEN
            X(3*ghost_ind-2) = X(3*parent_ind-2) + nx*l_per
            X(3*ghost_ind-1) = X(3*parent_ind-1) 
            X(3*ghost_ind)   = X(3*parent_ind)
        END IF
    REPEAT
END X_comp

SUBROUTINE X_dot_comp(ARRAY(*) OF REAL X_dot^; ARRAY(*) OF REAL q_tilde; ARRAY(*,*) OF INTEGER ghost_nodes; REAL l_b; INTEGER n_N, n_G)

    LOOP FOR i = 1 TO FLOOR((n_N-n_G)/2)
        X_dot(3*i-2) = l_b*[COS(q_tilde(2*i-1+(n_N-n_G)))*COS(q_tilde(2*i+(n_N-n_G)))*q_tilde(2*i-1)-SIN(q_tilde(2*i-1+(n_N-n_G)))*SIN(q_tilde(2*i+(n_N-n_G)))*q_tilde(2*i)]
        X_dot(3*i-1) = l_b*[COS(q_tilde(2*i-1+(n_N-n_G)))*SIN(q_tilde(2*i+(n_N-n_G)))*q_tilde(2*i-1)+SIN(q_tilde(2*i-1+(n_N-n_G)))*COS(q_tilde(2*i+(n_N-n_G)))*q_tilde(2*i)]
        X_dot(3*i)   = -l_b*SIN(q_tilde(2*i-1+(n_N-n_G)))*q_tilde(2*i-1)
    REPEAT

    LOOP FOR i = 1 TO n_G
        ghost_ind  = ghost_nodes(i, 1)
        parent_ind = ghost_nodes(i, 2)

        X_dot(3*ghost_ind-2) = X_dot(3*parent_ind-2)
        X_dot(3*ghost_ind-1) = X_dot(3*parent_ind-1)
        X_dot(3*ghost_ind)   = X_dot(3*parent_ind)
    REPEAT
END X_dot_comp


ARRAY(0..nz) OF REAL u_mean=0, uu=0, vv=0, ww=0, uv=0, uw=0, vw=0, zz

Lz = 2.505495
dx = Lz/nz
LOOP FOR i = 0 TO nz
    zz(i) = i*dx
REPEAT

!{

LOOP FOR i = nfmin TO nfmax
    WRITE i

    savedfield=OPENRO(output_folder_path"field_output/undwall_"i".field")
    READ BY NAME FROM savedfield nx,ny,nz,Lx,Ly,nu,deltat

    READ FROM savedfield
    READ BY NAME FROM savedfield it,headx,heady
    READ BY NAME FROM savedfield t
    READ FROM savedfield
    READ FROM savedfield
    POINTER TO STORED STRUCTURE[CHAR header(POSITION(savedfield)); REAL z(0..2*nz)
                                ARRAY(1..nx,1..ny,0..nz) OF VARS v] stored=savedfield
    var=stored.v

    CLOSE savedfield
    FREE stored

    LOOP FOR j = 0 TO nz
        LOOP FOR m = 1 TO nx AND n = 1 TO ny
        IF m-1 = 0 THEN
            u_mean(j) = ~+(var.u(m,n,j)+var.u(nx,n,j))/2
        ELSE
            u_mean(j) = ~+(var.u(m,n,j)+var.u(m-1,n,j))/2
        END IF
        REPEAT
    REPEAT
REPEAT
u_mean(*) = ~/[nx*ny*(nfmax-nfmin+1)]


LOOP FOR i = nfmin TO nfmax
    WRITE i

    savedfield=OPENRO(output_folder_path"field_output/undwall_"i".field")
    READ BY NAME FROM savedfield nx,ny,nz,Lx,Ly,nu,deltat

    READ FROM savedfield
    READ BY NAME FROM savedfield it,headx,heady
    READ BY NAME FROM savedfield t
    READ FROM savedfield
    READ FROM savedfield
    POINTER TO STORED STRUCTURE[CHAR header(POSITION(savedfield)); REAL z(0..2*nz)
                                ARRAY(1..nx,1..ny,0..nz) OF VARS v] stored=savedfield
    var=stored.v

    CLOSE savedfield
    FREE stored

    INTEGER ind_m, ind_n
    LOOP FOR j = 0 TO nz
        LOOP FOR m = 1 TO nx AND n = 1 TO ny
            ind_m = m-1
            ind_n = n-1
            IF m-1=0 THEN
                ind_m = nx
            END IF
            IF n-1=0 THEN
                ind_n = ny
            END IF
            uu(j) = ~+([var.u(m,n,j)+var.u(ind_m,n,j)]/2-u_mean(j))*([var.u(m,n,j)+var.u(ind_m,n,j)]/2-u_mean(j))
            vv(j) = ~+(var.v(m,n,j)+var.v(m,ind_n,j))/2*(var.v(m,n,j)+var.v(m,ind_n,j))/2
            uv(j) = ~+([var.u(m,n,j)+var.u(ind_m,n,j)]/2-u_mean(j))*(var.v(m,n,j)+var.v(m,ind_n,j))/2     
            IF j # 0 THEN
                ww(j) = ~+[var.w(m,n,j)+var.w(m,n,j-1)]/2*[var.w(m,n,j)+var.w(m,n,j-1)]/2
                uw(j) = ~+([var.u(m,n,j)+var.u(ind_m,n,j)]/2-u_mean(j))*[var.w(m,n,j)+var.w(m,n,j-1)]/2
                vw(j) = ~+[var.v(m,n,j)+var.v(m,ind_n,j)]/2*[var.w(m,n,j)+var.w(m,n,j-1)]/2
            END IF
        REPEAT
    REPEAT
REPEAT
uu(*) = ~/[nx*ny*(nfmax-nfmin+1)]
vv(*) = ~/[nx*ny*(nfmax-nfmin+1)]
ww(*) = ~/[nx*ny*(nfmax-nfmin+1)]
uv(*) = ~/[nx*ny*(nfmax-nfmin+1)]
uw(*) = ~/[nx*ny*(nfmax-nfmin+1)]
vw(*) = ~/[nx*ny*(nfmax-nfmin+1)]

!}

SUBROUTINE vec_to_csv_real(ARRAY(*) OF REAL arr; STRING file_name)

    output_ = CREATE(file_name)

    LOOP FOR i = LO(arr) TO HI(arr)
        WRITE TO output_ arr(i) ./.
        WRITE TO output_
    REPEAT
    CLOSE(output_)
END vec_to_csv_real

vec_to_csv_real(u_mean, "./u_mean.csv")
vec_to_csv_real(zz, "./z_pos.csv")
vec_to_csv_real(uu, "./uu.csv")
vec_to_csv_real(vv, "./vv.csv")
vec_to_csv_real(ww, "./ww.csv")
vec_to_csv_real(uv, "./uv.csv")
vec_to_csv_real(uw, "./uw.csv")
vec_to_csv_real(vw, "./vw.csv")


dim_q_tilde     = csv_dim_count(output_folder_path"tensegrity_output/time_serie/q_tilde_1.csv")
dim_par_int     = csv_dim_count(output_folder_path"tensegrity_parameters/par_int_arr.csv")
dim_par_real    = csv_dim_count(output_folder_path"tensegrity_parameters/par_real_arr.csv")
dim_ghost_nodes = csv_dim_count(output_folder_path"tensegrity_output/ghost_nodes.csv")
dim_X_0         = csv_dim_count(output_folder_path"tensegrity_output/X_0.csv")

ARRAY(dim_q_tilde(1), dim_q_tilde(2)) OF REAL q_tilde_i
ARRAY(dim_par_int(1), dim_par_int(2)) OF INTEGER par_int_arr
ARRAY(dim_par_real(1), dim_par_real(2)) OF REAL par_real_arr
ARRAY(dim_ghost_nodes(1), dim_ghost_nodes(2)) OF INTEGER ghost_nodes
ARRAY(dim_X_0(1), dim_X_0(2)) OF REAL X_0, X, X_dot

import_csv_int(par_int_arr, dim_par_int, output_folder_path"tensegrity_parameters/par_int_arr.csv")
import_csv_real(par_real_arr, dim_par_real, output_folder_path"tensegrity_parameters/par_real_arr.csv")
import_csv_int(ghost_nodes, dim_ghost_nodes, output_folder_path"tensegrity_output/ghost_nodes.csv")
import_csv_real(X_0, dim_X_0, output_folder_path"tensegrity_output/X_0.csv")

nx_t      = par_int_arr(1,1)
nz_t      = par_int_arr(2,1)
n_C       = par_int_arr(3,1)
n_B       = par_int_arr(4,1)
n_T       = par_int_arr(5,1)
n_G       = par_int_arr(6,1)
n_N       = par_int_arr(7,1)
n_N_dof   = par_int_arr(8,1)
n_T_dof   = par_int_arr(9,1)
n_q_tilde = par_int_arr(10,1)

l_b   = par_real_arr(1,1)
l_per = par_real_arr(2,1)
h     = par_real_arr(3,1)
r     = par_real_arr(4,1)

REAL Dz_max=0, Dz_rms=0, w_rms=0

INTEGER count_w = 0

LOOP FOR i = nfmin+1 TO nfmax
    WRITE i
    import_csv_real(q_tilde_i, dim_q_tilde, output_folder_path"tensegrity_output/time_serie/q_tilde_"i".csv")
    X_comp(X(1..X.HI1,1), X_0(1..X_0.HI1,1), q_tilde_i(1..q_tilde_i.HI1,1), ghost_nodes, l_b, l_per, nx_t, nz_t, n_N, n_G)
    X_dot_comp(X_dot(1..X_dot.HI1,1), q_tilde_i(1..q_tilde_i.HI1,1), ghost_nodes, l_b, n_N, n_G)

    LOOP FOR j = 1 TO n_B
        IF ABS(X(3*j-1,1)-h) > Dz_max THEN
            Dz_max = ABS(X(3*j-1,1)-h)
        END IF

        Dz_rms = ~+([X(3*j-1,1)-h]*[X(3*j-1,1)-h])
        w_rms  = ~+(X_dot(3*j-1,1)*X_dot(3*j-1,1))
    REPEAT
REPEAT

Dz_rms = SQRT(Dz_rms/[n_B*(nfmax-nfmin+1)])
w_rms  = SQRT(w_rms/[n_B*(nfmax-nfmin+1)])

WRITE
WRITE "Dz_max = "Dz_max
WRITE "Dz_rms = "Dz_rms
WRITE "w_rms  = "w_rms

!{


MEANANDVAR U_b_hist
mvinit(U_b_hist)
REAL U_b

LOOP FOR i = nfmin TO nfmax
    savedfield=OPENRO(output_folder_path"field_output/undwall_"i".field")
    READ BY NAME FROM savedfield nx,ny,nz,Lx,Ly,nu,deltat

    READ FROM savedfield
    READ BY NAME FROM savedfield it,headx,heady
    READ BY NAME FROM savedfield t
    READ FROM savedfield
    READ FROM savedfield
    POINTER TO STORED STRUCTURE[CHAR header(POSITION(savedfield)); REAL z(0..2*nz)
                                ARRAY(1..nx,1..ny,0..nz) OF VARS v] stored=savedfield
    var=stored.v

    CLOSE savedfield
    FREE stored

    LOOP FOR m = 1 TO nx AND n = 1 TO ny
        LOOP FOR j = 0 TO nz
            IF m-1 = 0 THEN
                U_b = ~+[(var.u(m,n,j)+var.u(nx,n,j))/2]
            ELSE
                U_b = ~+[(var.u(m,n,j)+var.u(m-1,n,j))/2]
            END IF
        REPEAT
    REPEAT
    U_b = ~*2*[Lz/(2*nz*nx*ny)]
    meanandvar(U_b_hist, U_b)
    WRITE i, U_b
    U_b = 0
REPEAT

WRITE U_b_hist.mean, U_b_hist.rms
    
!}




