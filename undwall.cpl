USE complex
USE rbmat
!USE rtchecks
USE meanandvar


!
! ATTENZIONE FORZA SOLO PRESSIONE
!


! Defines
! ------------------------
#define cpg
#define mpiverbose
! ------------------------

VARS=STRUCTURED ARRAY(p,u,v,w) OF REAL

! Inclusioni Tensegrity
USE tensegrity_submodule/channel_inclusions

TENSEGRITY_INIT tensegrity_init
readInputFile(tensegrity_init, "input/tensegrity.in")

WALLS=2
INTEGER nx,ny,nz,it=0,itc=50,it_max
REAL headx=0.,heady=0.,nu,Lx,Ly,Lz,deltat,Uconv=0,cfl,Reb,tau,t,Tin=100
REAL ww,delta,xx,yy,time_max
INTEGER izu,izv,izw,fromfield
myname=basename(COMMANDLINE(0))

!FILE in_data=OPEN("input/data.in")
!READ BY NAME FROM in_data nx,ny,nz,Lx,Ly,Lz,nu,Tin,itc,fromfield,deltat,time_max,it_max ! some data is overwritten if myname.field is present

REAL t=0

USE modules/dns

! IMPORT FIELD TURBOLENTO
! Inputs
! ==================================== 
! Read input file
DNS dns
STRING filename=WRITE("./input/initial_field/dns.in")
readInputFile(dns,filename)

! Read parameters and grid from restart file
FILE savedfield_turb=OPENRO("input/initial_field/Field.fld")
IF savedfield_turb#NULL THEN
STRING filename=WRITE("input/initial_field/Field.fld")
readRestartFile(dns, filename)
END IF

! Initialization
! ==================================== 
ARRAY[1..dns.size_turb(0),1..dns.size_turb(1),0..dns.size_turb(2)] OF VARS var_turb_field = 0

! Read data from the .field file
! ------
POINTER TO STORED STRUCTURE[INTEGER nxs,nys,nzs,its
	REAL Lxs,Lys,headxs,headys,nus,times
	REAL x(-2..2*dns.size_turb(0)+5)
	REAL y(-2..2*dns.size_turb(1)+5)
	REAL z(0..2*dns.size_turb(2))
	ARRAY(1..dns.size_turb(0),1..dns.size_turb(1),0..dns.size_turb(2)) OF VARS v] stored_turb=OPENRO("input/initial_field/Field.fld")
IF stored_turb#NULL THEN
	IF TRUE THEN WRITE "Reading velocity from turbolent flow field file ..."
  	var_turb_field(LO+1..HI-1,LO+1..HI-1)=stored_turb.v(var_turb_field.LO1+1..var_turb_field.HI1-1,var_turb_field.LO2+1..var_turb_field.HI2-1)
ELSE
END IF
IF stored_turb#NULL THEN CLOSE stored_turb

FILE in_data=OPEN("input/data.in")
READ BY NAME FROM in_data nx,ny,nz,Lx,Ly,Lz,nu,Tin,itc,fromfield,deltat,time_max,it_max ! some data is overwritten if myname.field is present

! MODIFICHE DNS E TENSEGRITY PER FIELD TURBOLENTO
nx = dns.size_turb(0)
ny = dns.size_turb(1)
Lx = dns.leng_turb(0)
REAL l_per_comp = Lx/tensegrity_init.nz
tensegrity_init.nx = FLOOR(tensegrity_init.nz/2)
Ly = tensegrity_init.nx*l_per_comp
tensegrity_init.r = l_per_comp / (2*SQRT(2-SQRT(2)))
REAL deltaz=dns.leng_turb(2)/dns.size_turb(2)
INTEGER ny_cell = FLOOR(0.51/deltaz)
tensegrity_init.h = deltaz*ny_cell
nz = dns.size_turb(2) + ny_cell
Lz = Lz + tensegrity_init.h
headx = dns.headx_turb
nu = dns.nu_turb
updateTens(tensegrity_init)

INTEGER n_t = FLOOR(it_max / itc)
TENSEGRITY(tensegrity_init.nx, tensegrity_init.nz, tensegrity_init.n_C, tensegrity_init.n_B, tensegrity_init.n_T, tensegrity_init.n_G, tensegrity_init.n_N, tensegrity_init.n_N_dof, tensegrity_init.n_T_dof, 
           tensegrity_init.n_q_tilde, tensegrity_init.n_P, tensegrity_init.n_int, tensegrity_init.n_tri_int, n_t, 2*(nx+2), 2*(ny+2), 2*tensegrity_init.n_B, 3*tensegrity_init.n_B, 3*tensegrity_init.n_G) tensegrity
initilizeTensegrity(tensegrity, tensegrity_init)
tensegrity.time = t
LOOP FOR i = 1 TO n_t
  tensegrity.t_vec(i) = (i-1)*deltat
REPEAT
tensegrity.tens_it = 0
tensegrity.nu = nu
tensegrity.p_max = -1
INTEGER ix_max=-1,iy_max=-1,iz_max=-1
tensegrity.disp_z_plus_max = 0
tensegrity.disp_z_minus_max = 0
tensegrity.vel_z_plus_max = 0
tensegrity.vel_z_minus_max = 0

! Salvataggio parametri tensegrity
ARRAY(10) OF INTEGER par_int_arr = (tensegrity.nx, tensegrity.nz, tensegrity.n_C, tensegrity.n_B, tensegrity.n_T,
                                    tensegrity.n_G, tensegrity.n_N, tensegrity.n_N_dof, tensegrity.n_T_dof, tensegrity.n_q_tilde)
ARRAY(4) OF REAL par_real_arr = (tensegrity.l_b, tensegrity.l_per, tensegrity.h, tensegrity.r)
vec_to_csv_int(par_int_arr, "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/tensegrity_parameters/par_int_arr.csv")
vec_to_csv_real(par_real_arr, "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/tensegrity_parameters/par_real_arr.csv")
vec_to_csv_real(tensegrity.X_0, "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/tensegrity_output/X_0.csv")
mat_to_csv_int(tensegrity.P_mat(*,*,1), "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/tensegrity_output/P_mat.csv")
mat_to_csv_int(tensegrity.P_mat(*,*,2), "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/tensegrity_output/P_mat_per.csv")
mat_to_csv_int(tensegrity.ghost_nodes, "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/tensegrity_output/ghost_nodes.csv")
vec_to_csv_real(tensegrity.t_vec, "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/tensegrity_output/t_vec.csv")

WRITE '########################################################################################################################################################'
WRITE 'Data from data.in: '
WRITE BY NAME nx,ny,nz,Lx,Ly,Lz,nu,Tin,itc,fromfield
WRITE '########################################################################################################################################################'

FILE savedfield=OPENRO(""myname".field")
IF savedfield#NULL THEN READ BY NAME FROM savedfield nx,ny,nz,Lx,Ly,nu,deltat

deltax=Lx/nx; deltay=Ly/ny

UFR=WALLS*(1-Uconv)
!UFR=0
VFR=0
REAL FUNCTION scale(REAL x)=x
INCLUDE parallelbcs.h
REAL zd(0..2*nz)
zz=^zd(2*(*))
ARRAY[nxl(nx)-1..nxh(nx)+1,nyl(ny)-1..nyh(ny)+1,0..nz] OF VARS var=0,old

! IMPOSIZIONE FIELD TURBOLENTO
REAL scaling_factor = 1
LOOP FOR ix = 1 TO nx AND iy = 1 TO ny AND iz = 0 TO dns.size_turb(2)
  var(ix,iy,iz+ny_cell).p = var_turb_field(ix,iy,iz).p
  var(ix,iy,iz+ny_cell).u = scaling_factor*var_turb_field(ix,iy,iz).u
  var(ix,iy,iz+ny_cell).v = scaling_factor*var_turb_field(ix,iy,iz).v
  var(ix,iy,iz+ny_cell).w = scaling_factor*var_turb_field(ix,iy,iz).w
REPEAT

USE parallelbcs
USE iofiles
! rescale zd
DO zd(iz)=iz/nz FOR iz=0 TO 2*nz
zd=Lz*zd/2.0

REAL FUNCTION wall(REAL x,y; TENSEGRITY this^)

  RESULT=  this.bar_weights(1)*this.vert_pos(3,1) +
           this.bar_weights(2)*this.vert_pos(3,2) +
           this.bar_weights(3)*this.vert_pos(3,3)
END wall
BOOLEAN FUNCTION bwall(REAL x,y,z; TENSEGRITY this^)

  RESULT=z<wall(x,y,tensegrity)
END bwall
BOOLEAN FUNCTION twall(REAL x,y,z; TENSEGRITY this^)

    RESULT=z>Lz + tensegrity.h
END twall
REAL FUNCTION bwbc(REAL x,y; TENSEGRITY this^)

  RESULT= this.bar_weights(1)*this.vert_vel_zy(1) +
          this.bar_weights(2)*this.vert_vel_zy(2) +
          this.bar_weights(3)*this.vert_vel_zy(3)
END bwbc
REAL FUNCTION twbc(REAL x,y; TENSEGRITY this^)

  RESULT= 0
END twbc

USE timestep

REAL FUNCTION Bisection[FUNCTION(REAL s)->BOOLEAN f; REAL VARIABLE x1, x2]
  f1 = f(x1); f2 = f(x2)
  IF f1 = f2 THEN ERROR "Bisection point not included in " x1 " " x2
  LOOP halve
    RESULT=(x1+x2)/2
    IF ABS(x2-x1)<1E-10 THEN EXIT Bisection
    IF f(RESULT)=f1 THEN x1=RESULT ELSE x2=RESULT
  REPEAT halve
END Bisection

SUBROUTINE calcoef(FUNCTION(REAL x,y,z; TENSEGRITY this^)->BOOLEAN InBody; POINTER TO ARRAY(*) OF REAL imbc^; INTEGER izlo,izhi,ix,iy,dix,diy,diz; TENSEGRITY this^)
  imbc=NEW ARRAY(izlo..izhi) OF REAL
  x=(ix+0.5*dix)*deltax; y=(iy+0.5*diy)*deltay
  LOOP FOR iz=izlo TO izhi
      z=zd(2*iz+diz)
      deltazm=z-zd(2*iz-2+diz)
      deltazp=zd(2*iz+2+diz)-z
      d2zm=1/deltazm/[zd(2*iz+diz+1)-zd(2*iz+diz-1)]
      d2zp=1/deltazp/[zd(2*iz+diz+1)-zd(2*iz+diz-1)]
      REAL rsd=0
      IF InBody(x,y,z,this) THEN rsd=1E20 ELSE
	      REAL d=deltax
	      IF InBody[x-deltax,y,z,this] THEN d=x-Bisection[<InBody(s,y,z,this)>,x-deltax,x]
      	IF d=0 THEN rsd=1E20 ELSE rsd=~+deltax/d*d2x
	      d=deltax
	      IF InBody(x+deltax,y,z,this) THEN d=Bisection[<InBody(s,y,z,this)>,x,x+deltax]-x
	      IF d=0 THEN rsd=1E20 ELSE rsd=~+deltax/d*d2x
	      d=deltay
	      IF InBody(x,y-deltay,z,this) THEN d=y-Bisection[<InBody(x,s,z,this)>,y-deltay,y]
	      IF d=0 THEN rsd=1E20 ELSE rsd=~+deltay/d*d2y
	      d=deltay
	      IF InBody(x,y+deltay,z,this) THEN d=Bisection[<InBody(x,s,z,this)>,y,y+deltay]-y
	      IF d=0 THEN rsd=1E20 ELSE rsd=~+deltay/d*d2y
	      d=deltazm
	      IF InBody(x,y,z-deltazm,this) THEN d=z-Bisection[<InBody(x,y,s,this)>,z-deltazm,z]
	      IF d=0 THEN rsd=1E20 ELSE rsd=~+deltazm/d*d2zm
	      d=deltazp
	      IF InBody(x,y,z+deltazp,this) THEN d=Bisection[<InBody(x,y,s,this)>,z,z+deltazp]-z
	      IF d=0 THEN rsd=1E20 ELSE rsd=~+deltazp/d*d2zp
      END IF
      imbc(iz)=[rsd-2*d2x-2*d2y-d2zm-d2zp]*nu
  REPEAT
END calcoef

SUBROUTINE calcimbc(TYPEOF(buimbc) bimbc^,timbc^; INTEGER dix,diy,diz; TENSEGRITY this^)
  d2x=1/deltax/deltax; d2y=1/deltay/deltay
  LOOP FOR ix=bimbc.LO1 TO bimbc.HI1 AND iy=bimbc.LO2 TO bimbc.HI2
    x=(ix+0.5*dix)*deltax; y=(iy+0.5*diy)*deltay
    find_ind_panel(this,x,y,ix,iy,dix,diy)
    INTEGER izlo=0
    DO INC izlo WHILE bwall[x,y,zd(2*izlo+diz),this]
    INTEGER izhi=izlo
    LOOP FOR iz=izlo+1 TO nz-1-diz
      z=zd(2*iz+diz)
      IF bwall(x,y,z,this) OR bwall[x+deltax,y,z,this] OR
          bwall[x-deltax,y,z,this] OR bwall[x,y+deltay,z,this] OR
          bwall[x,y-deltay,z,this] OR bwall[x,y,zd(2*iz+2+diz),this] OR
          bwall[x,y,zd(2*iz-2+diz),this] THEN izhi=iz
    REPEAT
    calcoef(bwall,bimbc(ix,iy),izlo,izhi,ix,iy,dix,diy,diz,this)
    izhi=[IF diz=1 THEN nz-1 ELSE nz]
    DO izhi=~-1 WHILE twall[x,y,zd(2*izhi+diz),this]
    izlo=izhi
    LOOP FOR iz=izhi-1 DOWN TO 1
      z=zd(2*iz+diz)
      IF twall(x,y,z,this) OR twall[x+deltax,y,z,this] OR
          twall[x-deltax,y,z,this] OR twall[x,y+deltay,z,this] OR
          twall[x,y-deltay,z,this] OR twall[x,y,zd(2*iz+2+diz),this] OR
          twall[x,y,zd(2*iz-2+diz),this] THEN izlo=iz
    REPEAT
    calcoef(twall,timbc(ix,iy),izlo,izhi,ix,iy,dix,diy,diz,this)
  REPEAT
END calcimbc

INTEGER nop = 0

USE timestep

   calcimbc(buimbc,tuimbc,1,0,0,tensegrity)
   calcimbc(bvimbc,tvimbc,0,1,0,tensegrity)
   calcimbc(bwimbc,twimbc,0,0,1,tensegrity)

   LOOP FOR ALL ix AND ALL iy
    find_ind_panel(tensegrity,ix*deltax,iy*deltay,ix,iy,0,0)
    DO var(ix,iy,iz).u=0 FOR iz=0 TO buimbc(ix,iy).LO-1; DO var(ix,iy,iz).u=0 FOR iz=tuimbc(ix,iy).HI+1 TO nz
    DO var(ix,iy,iz).v=0 FOR iz=0 TO bvimbc(ix,iy).LO-1; DO var(ix,iy,iz).v=0 FOR iz=tvimbc(ix,iy).HI+1 TO nz
    DO var(ix,iy,iz).w=bwbc(ix*deltax,iy*deltay,tensegrity) FOR iz=0 TO bwimbc(ix,iy).LO-1; DO var(ix,iy,iz).w=twbc(ix*deltax,iy*deltay,tensegrity) FOR iz=twimbc(ix,iy).HI+1 TO nz
   REPEAT

savefield("/media/lorenzo/Hard Disk 2/output_codice_tesi/output/field_output/undwall_0.field")

UFR_file = OPEN("/media/lorenzo/Hard Disk 2/output_codice_tesi/output/UFR.csv")
REAL UFR_comp

deltat=0.001

IF iproc=1 THEN WRITE 'Starting the time loop ...'
LOOP timeloop WHILE it < it_max AND t < time_max

  !{courant(tau)
  cfl=tau*deltat
  deltat=cfl/tau!}

  timestep(rai1, tensegrity) 
  timestep(rai2, tensegrity)
  timestep(rai3, tensegrity)


  timestep_tensegrity(tensegrity, var, deltat, deltax, deltay, deltaz, nx, ny, nz)
  INC tensegrity.tens_it


  INC it; t=~+deltat
  tensegrity.time = t
  LOOP FOR ALL ix AND ALL iy
    FREE buimbc(ix,iy), bvimbc(ix,iy), bwimbc(ix,iy), tuimbc(ix,iy), tvimbc(ix,iy), twimbc(ix,iy)
  REPEAT
  output(UFR_comp)

   calcimbc(buimbc,tuimbc,1,0,0, tensegrity)
   calcimbc(bvimbc,tvimbc,0,1,0, tensegrity)
   calcimbc(bwimbc,twimbc,0,0,1, tensegrity)

   LOOP FOR ALL ix AND ALL iy
    find_ind_panel(tensegrity,ix*deltax,iy*deltay,ix,iy,0,0)
    DO var(ix,iy,iz).u=0 FOR iz=0 TO buimbc(ix,iy).LO-1; DO var(ix,iy,iz).u=0 FOR iz=tuimbc(ix,iy).HI+1 TO nz
    DO var(ix,iy,iz).v=0 FOR iz=0 TO bvimbc(ix,iy).LO-1; DO var(ix,iy,iz).v=0 FOR iz=tvimbc(ix,iy).HI+1 TO nz
    DO var(ix,iy,iz).w=bwbc(ix*deltax,iy*deltay,tensegrity) FOR iz=0 TO bwimbc(ix,iy).LO-1; DO var(ix,iy,iz).w=twbc(ix*deltax,iy*deltay,tensegrity) FOR iz=twimbc(ix,iy).HI+1 TO nz
   REPEAT

   
  IF t>=Tin AND it MOD itc = 0 THEN
    INC nop 
    savefield("/media/lorenzo/Hard Disk 2/output_codice_tesi/output/field_output/"myname"_"nop".field")
    vec_to_csv_real(tensegrity.q_tilde, "/media/lorenzo/Hard Disk 2/output_codice_tesi/output/tensegrity_output/time_serie/q_tilde_"nop".csv")
    WRITE TO UFR_file UFR_comp:1.15
  END IF
REPEAT timeloop

CLOSE(UFR_file)

! Finalisations
! ------------------------
MODULE finalise
 <* MPI_Finalize();*>
END finalise
