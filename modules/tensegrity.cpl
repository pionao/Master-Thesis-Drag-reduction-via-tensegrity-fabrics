!USE rtchecks

TENSEGRITY_INIT = STRUCTURE[ INTEGER nx,nz,n_C,n_B,n_T,n_G,n_N,n_N_dof,n_T_dof,n_q_tilde,n_P,n_int,n_tri_int;
                              REAL rho_b,k,sigma,h,r]

!{TENSEGRITY = STRUCTURE[ INTEGER CONSTANT nx,nz,n_C,n_B,n_T,n_G,n_N,n_N_dof,n_T_dof,n_q_tilde,n_P,n_int,n_tri_int,n_t;
                         REAL rho_b,k,sigma,h,r,l_b,I_0,alpha_1,l_per,l_v_1,l_h_1,
                              l_u_l,l_u_s,l_u_l_0,l_h_0,l_u_s_0,l_i_0,; 
                         ARRAY(n_B,2) OF INTEGER B_con;
                         ARRAY(n_T,2) OF INTEGER T_con;
                         ARRAY(n_G,3) OF INTEGER ghost_nodes;
                         ARRAY(n_T) OF REAL l_0;
                         ARRAY(n_P,3,2) OF INTEGER P_mat;
                         ARRAY(n_tri_int,3) OF REAL bar_lambda_mat;
                         ARRAY(n_N_dof) OF REAL X_0;
                         ARRAY(n_q_tilde) OF REAL q_0_tilde;
                         ARRAY(n_t) OF REAL t_vec;
                         ARRAY(n_N_dof) OF REAL X, X_dot;
                         ARRAY(n_q_tilde) OF REAL q_tilde;
                         ARRAY(n_q_tilde,n_t) OF REAL q_tilde_arr;
                         ARRAY(3) OF REAL bar_weights;
                         ARRAY(3,3) OF REAL vert_pos;
                         ARRAY(3) OF REAL vert_vel_zy;
                         POINTER TO REAL time
		   ]!}

! math_utils.h

SUBROUTINE MatMult(ARRAY(*,*) OF REAL A; ARRAY(*,*) OF REAL B; ARRAY(*,*) OF REAL C^)
    REAL sum
    LOOP FOR i = 1 TO HI1(A)
        LOOP FOR j = 1 TO HI2(B)
            sum = 0
            LOOP FOR k = 1 TO HI2(A)
                sum = sum + A(i,k)*B(k,j)
            REPEAT
            C(i,j) = sum
        REPEAT
    REPEAT
END MatMult

SUBROUTINE MatDiff(ARRAY(*,*) OF REAL A; ARRAY(*,*) OF REAL B; ARRAY(*,*) OF REAL C^)
    LOOP FOR i = 1 TO HI1(A)
        LOOP FOR j = 1 TO HI2(B)
            C(i,j) = A(i,j) - B(i,j)
        REPEAT
    REPEAT
END MatDiff


! initial_state_utils.h

SUBROUTINE X_0_comp(ARRAY(*) OF REAL X_0^; REAL h; REAL r; REAL alpha_1; REAL l_per; INTEGER nx; INTEGER nz; INTEGER n_N; INTEGER n_G; INTEGER n_N_dof; ARRAY(n_G,3) OF INTEGER ghost_nodes)
    REAL CONSTANT PI
    PI = 3.14159265358979323846

    ARRAY(3, 3) OF REAL T_1
    T_1(1, 1..3) = ( COS(alpha_1), 0, SIN(alpha_1))
    T_1(2, 1..3) = (            0, 1,            0)
    T_1(3, 1..3) = (-SIN(alpha_1), 0, COS(alpha_1))

    ARRAY(3, 3) OF REAL T_2
    T_2(1, 1..3) = ( COS(PI/4+PI/2), 0, SIN(PI/4+PI/2))
    T_2(2, 1..3) = (         0, 1,         0)
    T_2(3, 1..3) = (-SIN(PI/4+PI/2), 0, COS(PI/4+PI/2))
    
    ARRAY(3, 4) OF REAL vert_low, vert_low_temp
    vert_low(1, 1..4) = (SQRT(2)*r, SQRT(2)*r, 0,         0)
    vert_low(2, 1..4) = (        0,         0, 0,         0)
    vert_low(3, 1..4) = (SQRT(2)*r,         0, 0, SQRT(2)*r)

    vert_low_temp = vert_low
    MatMult(T_1, vert_low_temp, vert_low)

    ARRAY(3) OF REAL cell_center_pos
    cell_center_pos(1..3) = (vert_low(1,1)/2, 0, vert_low(3,1)/2) 
    
    LOOP FOR i = 1 TO 3 AND j = 1 TO 4
        vert_low(i,j) = vert_low(i,j) - cell_center_pos(i)
    REPEAT
    
    ARRAY(3, 4) OF REAL vert_up
    MatMult(T_2, vert_low, vert_up)
    vert_up(2, 1..4) = (h, h, h, h)

    ARRAY(3) OF REAL dx_0 = (vert_up(1,2), 0, 0)
    ARRAY(3) OF REAL dz_0 = (0, 0, vert_up(3,1))

    LOOP FOR i = 1 TO 3 AND j = 1 TO 4
        vert_low(i,j) = vert_low(i,j) - dx_0(i) - dz_0(i)
        vert_up(i,j)  = vert_up(i,j)  - dx_0(i) - dz_0(i)
    REPEAT

    n_N_ng = n_N - n_G

    ARRAY(FLOOR(3*n_N_ng/2)) OF REAL X_0_sup
    ARRAY(FLOOR(3*n_N_ng/2)) OF REAL X_0_inf

    ARRAY(3,4) OF REAL vert_low_i
    ARRAY(3,4) OF REAL vert_up_i

    ARRAY(3) OF REAL dx
    ARRAY(3) OF REAL dz
    LOOP FOR i = 1 TO nz AND j = 1 TO nx
        dx = ((j-1)*l_per, 0,           0)
        dz = (          0, 0, (i-1)*l_per)
        LOOP FOR k = 1 TO 3 AND m = 1 TO  4
            vert_low_i(k,m) = vert_low(k,m) + dx(k) + dz(k)
            vert_up_i(k,m)  = vert_up(k,m) + dx(k) + dz(k)
        REPEAT
        LOOP FOR k = 1 TO 4
            X_0_sup(FLOOR(3*4*(i+(j-1)*nz)-(3*4-1)+3*(k-1)))   = vert_up_i(1,k)
            X_0_sup(FLOOR(3*4*(i+(j-1)*nz)-(3*4-1)+3*(k-1)+1)) = vert_up_i(2,k)
            X_0_sup(FLOOR(3*4*(i+(j-1)*nz)-(3*4-1)+3*(k-1)+2)) = vert_up_i(3,k)
            X_0_inf(FLOOR(3*4*(i+(j-1)*nz)-(3*4-1)+3*(k-1)))   = vert_low_i(1,k)
            X_0_inf(FLOOR(3*4*(i+(j-1)*nz)-(3*4-1)+3*(k-1)+1)) = vert_low_i(2,k)
            X_0_inf(FLOOR(3*4*(i+(j-1)*nz)-(3*4-1)+3*(k-1)+2)) = vert_low_i(3,k)
        REPEAT
    REPEAT

    ARRAY(3) OF REAL Dx
    ARRAY(3) OF REAL Dz 

    Dx = (nx*l_per, 0,        0)
    Dz = (       0, 0, nz*l_per)

    ARRAY(3*n_G) OF REAL X_0_g
    ARRAY(3) OF REAL X_g

    LOOP FOR i = 1 TO n_G
        parent_ind = ghost_nodes(i, 2)
        per_dir    = ghost_nodes(i, 3)

        IF per_dir = 1 THEN
            X_g(1) = X_0_sup(FLOOR(3*parent_ind-2)) - Dx(1)
            X_g(2) = X_0_sup(FLOOR(3*parent_ind-1)) - Dx(2)
            X_g(3) = X_0_sup(FLOOR(3*parent_ind))   - Dx(3)
        ELSE IF per_dir = 2 THEN
            X_g(1) = X_0_sup(FLOOR(3*parent_ind-2)) - Dz(1)
            X_g(2) = X_0_sup(FLOOR(3*parent_ind-1)) - Dz(2)
            X_g(3) = X_0_sup(FLOOR(3*parent_ind))   - Dz(3)
        ELSE IF per_dir = 3 THEN
            X_g(1) = X_0_sup(FLOOR(3*parent_ind-2)) + Dz(1)
            X_g(2) = X_0_sup(FLOOR(3*parent_ind-1)) + Dz(2)
            X_g(3) = X_0_sup(FLOOR(3*parent_ind))   + Dz(3)
        ELSE IF per_dir = 4 THEN
            X_g(1) = X_0_sup(FLOOR(3*parent_ind-2)) + Dx(1)
            X_g(2) = X_0_sup(FLOOR(3*parent_ind-1)) + Dx(2)
            X_g(3) = X_0_sup(FLOOR(3*parent_ind))   + Dx(3)
        END IF

     X_0_g(3*i-2) = X_g(1)
     X_0_g(3*i-1) = X_g(2)
     X_0_g(3*i)   = X_g(3)  
    REPEAT

    LOOP FOR i = 1 TO FLOOR(3*n_N_ng/2)
        X_0(i) = X_0_sup(i)
    REPEAT

    LOOP FOR i = FLOOR(3*n_N_ng/2+1) TO FLOOR(2*3*n_N_ng/2)
        X_0(i) = X_0_inf(i-FLOOR(3*n_N_ng/2+1)+1)
    REPEAT

    LOOP FOR i = FLOOR(2*3*n_N_ng/2+1) TO FLOOR(2*3*n_N_ng/2+3*n_G)
        X_0(i) = X_0_g(i-FLOOR(2*3*n_N_ng/2+1)+1)
    REPEAT
END X_0_comp


SUBROUTINE q_0_tilde_comp(ARRAY(*) OF REAL q_0_tilde^; ARRAY(*) OF REAL X_0; ARRAY(*,*) OF INTEGER B_con; REAL l_b; INTEGER n_q_tilde; INTEGER n_B)

    ARRAY(3) OF REAL vec_dir
    ARRAY(3) OF REAL X_A
    ARRAY(3) OF REAL X_B
    INTEGER ind_A
    INTEGER ind_B

    LOOP FOR i = 1 TO n_B
        ind_A = B_con(i, 1)
        ind_B = B_con(i, 2)

        X_A(1) = X_0(3*ind_A-2)
        X_A(2) = X_0(3*ind_A-1)
        X_A(3) = X_0(3*ind_A)

        X_B(1) = X_0(3*ind_B-2)
        X_B(2) = X_0(3*ind_B-1)
        X_B(3) = X_0(3*ind_B)

        LOOP FOR k = 1 TO 3
            vec_dir(k) = (X_B(k) - X_A(k))/l_b
        REPEAT

        q_0_tilde(2*i-1+2*n_B) = acos(vec_dir(3))
        q_0_tilde(2*i+2*n_B)   = atan2(vec_dir(2), vec_dir(1))
    REPEAT
END q_0_tilde_comp

! dof_utils.h

SUBROUTINE X_dot_comp(ARRAY(*) OF REAL X_dot^; INTEGER n_N_dof; INTEGER n_N; INTEGER n_G; REAL l_b; ARRAY(*) OF REAL q_tilde; ARRAY(*,*) OF INTEGER ghost_nodes)

    LOOP FOR i = 1 TO FLOOR((n_N-n_G)/2)
        X_dot(3*i-2) = l_b*[COS(q_tilde(2*i-1+(n_N-n_G)))*COS(q_tilde(2*i+(n_N-n_G)))*q_tilde(2*i-1)-SIN(q_tilde(2*i-1+(n_N-n_G)))*SIN(q_tilde(2*i+(n_N-n_G)))*q_tilde(2*i)]
        X_dot(3*i-1) = l_b*[COS(q_tilde(2*i-1+(n_N-n_G)))*SIN(q_tilde(2*i+(n_N-n_G)))*q_tilde(2*i-1)+SIN(q_tilde(2*i-1+(n_N-n_G)))*COS(q_tilde(2*i+(n_N-n_G)))*q_tilde(2*i)]
        X_dot(3*i)   = -l_b*SIN(q_tilde(2*i-1+(n_N-n_G)))*q_tilde(2*i-1)
    REPEAT

    LOOP FOR i = 1 TO n_G
        ghost_ind  = ghost_nodes(i, 1)
        parent_ind = ghost_nodes(i, 2)

        X_dot(3*ghost_ind-2) = X_dot(3*parent_ind-2)
        X_dot(3*ghost_ind-1) = X_dot(3*parent_ind-1)
        X_dot(3*ghost_ind)   = X_dot(3*parent_ind)
    REPEAT
END X_dot_comp

SUBROUTINE X_comp(ARRAY(*) OF REAL X^; INTEGER n_N_dof; INTEGER n_N; INTEGER n_G; INTEGER nx; INTEGER nz; REAL l_per; REAL l_b; ARRAY(*) OF REAL q_tilde; ARRAY(*) OF REAL X_0; ARRAY(*,*) OF INTEGER ghost_nodes)

    X = X_0

    LOOP FOR i = 1 TO FLOOR((n_N-n_G)/2)
        X(3*i-2) = X_0(3*i-2+3*FLOOR((n_N-n_G)/2)) + l_b*SIN(q_tilde(2*i-1+(n_N-n_G)))*COS(q_tilde(2*i+(n_N-n_G)))
        X(3*i-1) = X_0(3*i-1+3*FLOOR((n_N-n_G)/2)) + l_b*SIN(q_tilde(2*i-1+(n_N-n_G)))*SIN(q_tilde(2*i+(n_N-n_G)))
        X(3*i)   = X_0(3*i  +3*FLOOR((n_N-n_G)/2)) + l_b*COS(q_tilde(2*i-1+(n_N-n_G)))
    REPEAT

    LOOP FOR i = 1 TO n_G
        ghost_ind  = ghost_nodes(i, 1)
        parent_ind = ghost_nodes(i, 2)
        per_dir    = ghost_nodes(i, 3)

        IF per_dir = 1 THEN
            X(3*ghost_ind-2) = X(3*parent_ind-2) - nx*l_per
            X(3*ghost_ind-1) = X(3*parent_ind-1) 
            X(3*ghost_ind)   = X(3*parent_ind)
        ELSE IF per_dir = 2 THEN
            X(3*ghost_ind-2) = X(3*parent_ind-2) 
            X(3*ghost_ind-1) = X(3*parent_ind-1)
            X(3*ghost_ind)   = X(3*parent_ind)   - nz*l_per
        ELSE IF per_dir = 3 THEN
            X(3*ghost_ind-2) = X(3*parent_ind-2) 
            X(3*ghost_ind-1) = X(3*parent_ind-1)
            X(3*ghost_ind)   = X(3*parent_ind)   + nz*l_per
        ELSE IF per_dir = 4 THEN
            X(3*ghost_ind-2) = X(3*parent_ind-2) + nx*l_per
            X(3*ghost_ind-1) = X(3*parent_ind-1) 
            X(3*ghost_ind)   = X(3*parent_ind)
        END IF
    REPEAT
END X_comp

! Matrices_utils.h

SUBROUTINE B_con_comp(ARRAY(*,*) OF INTEGER B_con^; INTEGER n_B; INTEGER n_C)
    
    LOOP FOR i = 1 TO n_C
        B_con(4*i-3, 1) = 4*n_C+1 + 4*(i-1)
        B_con(4*i-3, 2) = 1 + 4*(i-1)
        B_con(4*i-2, 1) = 4*n_C+2 + 4*(i-1)
        B_con(4*i-2, 2) = 2 + 4*(i-1)
        B_con(4*i-1, 1) = 4*n_C+3 + 4*(i-1)
        B_con(4*i-1, 2) = 3 + 4*(i-1)
        B_con(4*i, 1)   = 4*n_C+4 + 4*(i-1)
        B_con(4*i, 2)   = 4 + 4*(i-1)
    REPEAT
END B_con_comp 


SUBROUTINE T_comp(ARRAY(*,2) OF INTEGER T_con^; ARRAY(*,3) OF INTEGER ghost_nodes^; ARRAY(*) OF REAL l_0^; INTEGER nx; INTEGER nz; INTEGER n_C; INTEGER n_T; INTEGER n_G; REAL l_u_s_0; REAL l_u_l_0; REAL l_i_0)

    ARRAY(n_C, 10) OF INTEGER Ten_cell_up

    LOOP FOR j = 1 TO nx AND i = 1 TO nz

        ind = FLOOR(i+nz*(j-1))
        
        Ten_cell_up(ind, 1) = FLOOR(4*(i+(j-1)*nz)-3)
        Ten_cell_up(ind, 2) = FLOOR(4*(i+(j-1)*nz)-2)
        Ten_cell_up(ind, 3) = FLOOR(4*(i+(j-1)*nz)-1)
        Ten_cell_up(ind, 4) = FLOOR(4*(i+(j-1)*nz))

        IF NOT(i MOD nz=0) THEN
            Ten_cell_up(ind, 5) = FLOOR(i+(j-1)*nz+1)
        END IF

        IF NOT(j MOD nx=0) THEN
            Ten_cell_up(ind, 6) = FLOOR(i+j*nz)
        END IF

        IF j = 1 THEN
            Ten_cell_up(ind, 7) = FLOOR(i+nz*(nx-1))
        END IF

        IF i = 1 THEN
            Ten_cell_up(ind, 8) = FLOOR(nz+nz*(j-1))
        END IF

        IF i = nz THEN
            Ten_cell_up(ind, 9) = FLOOR(1+nz*(j-1))
        END IF

        IF j = nx THEN 
            Ten_cell_up(ind, 10) = i
        END IF
    REPEAT

    INTEGER count_1 = 0

    LOOP FOR i = 1 TO FLOOR(nx*nz)

        r_con = Ten_cell_up(i, 5)
        u_con = Ten_cell_up(i, 6)

        IF NOT(r_con = 0) THEN
            count_1 = count_1 + 1

            T_con(3*count_1-2, 1) = Ten_cell_up(i, 2)
            T_con(3*count_1-2, 2) = Ten_cell_up(r_con, 1)
            T_con(3*count_1-1, 1) = Ten_cell_up(r_con, 1)
            T_con(3*count_1-1, 2) = Ten_cell_up(i, 3)
            T_con(3*count_1, 1)   = Ten_cell_up(i, 3)
            T_con(3*count_1, 2)   = Ten_cell_up(r_con, 4)

            l_0(3*count_1-2) = l_u_s_0
            l_0(3*count_1-1) = l_u_l_0
            l_0(3*count_1)   = l_u_s_0
        END IF
        IF NOT(u_con = 0) THEN
            count_1 = count_1 + 1

            T_con(3*count_1-2, 1) = Ten_cell_up(u_con, 1)
            T_con(3*count_1-2, 2) = Ten_cell_up(i, 4)
            T_con(3*count_1-1, 1) = Ten_cell_up(i, 4)
            T_con(3*count_1-1, 2) = Ten_cell_up(u_con, 2)
            T_con(3*count_1, 1)   = Ten_cell_up(u_con, 2)
            T_con(3*count_1, 2)   = Ten_cell_up(i, 3)

            l_0(3*count_1-2) = l_u_s_0
            l_0(3*count_1-1) = l_u_l_0
            l_0(3*count_1)   = l_u_s_0
        END IF
    REPEAT

    INTEGER count_2 = 0
    INTEGER count_g = 0

    LOOP FOR i = 1 TO nz
        count_g             = count_g + 1
        count_2             = count_2 + 1
        ghost_down_cell_ind = Ten_cell_up(i, 7)
        ghost_node          = 8*nx*nz + count_g

        T_con(2*count_2-1+3*count_1, 1) = Ten_cell_up(i, 1)
        T_con(2*count_2-1+3*count_1, 2) = ghost_node
        T_con(2*count_2+3*count_1, 1)   = ghost_node
        T_con(2*count_2+3*count_1, 2)   = Ten_cell_up(i, 2)

        l_0(2*count_2-1+3*count_1) = l_u_s_0
        l_0(2*count_2+3*count_1)   = l_u_l_0

        ghost_nodes(count_g, 1) = ghost_node
        ghost_nodes(count_g, 2) = Ten_cell_up(ghost_down_cell_ind, 4)
        ghost_nodes(count_g, 3) = 1
    REPEAT

    LOOP FOR i = 1 TO nx
        count_g = count_g + 1
        count_2 = count_2 + 1

        j = 1 + (i-1)*nz

        ghost_left_cell_ind = Ten_cell_up(j, 8)
        ghost_node          = 8*nx*nz + count_g

        T_con(2*count_2-1+3*count_1, 1) = Ten_cell_up(j, 4)
        T_con(2*count_2-1+3*count_1, 2) = ghost_node
        T_con(2*count_2+3*count_1, 1)   = ghost_node
        T_con(2*count_2+3*count_1, 2)   = Ten_cell_up(j, 1)

        l_0(2*count_2-1+3*count_1) = l_u_s_0
        l_0(2*count_2+3*count_1)   = l_u_l_0

        ghost_nodes(count_g, 1) = ghost_node
        ghost_nodes(count_g, 2) = Ten_cell_up(ghost_left_cell_ind, 3)
        ghost_nodes(count_g, 3) = 2
    REPEAT

    INTEGER count_3 = 0

    LOOP FOR i = 1 TO nx
        count_g = count_g + 1
        count_3 = count_3 + 1

        j = i*nz

        ghost_right_cell_ind = Ten_cell_up(j, 9)
        ghost_node           = 8*nx*nz + count_g

        T_con(count_3+2*count_2+3*count_1, 1) = ghost_node
        T_con(count_3+2*count_2+3*count_1, 2) = Ten_cell_up(j, 2)

        l_0(count_3+2*count_2+3*count_1) = l_u_s_0

        ghost_nodes(count_g, 1) = ghost_node
        ghost_nodes(count_g, 2) = Ten_cell_up(ghost_right_cell_ind, 1)
        ghost_nodes(count_g, 3) = 3
    REPEAT

    LOOP FOR i = 1 TO nz
        count_g = count_g + 1
        count_3 = count_3 + 1

        j = i + (nx-1)*nz

        ghost_up_cell_ind = Ten_cell_up(j, 10)
        ghost_node        = 8*nx*nz + count_g

        T_con(count_3+2*count_2+3*count_1, 1) = ghost_node
        T_con(count_3+2*count_2+3*count_1, 2) = Ten_cell_up(j, 3)

        l_0(count_3+2*count_2+3*count_1) = l_u_s_0

        ghost_nodes(count_g, 1) = ghost_node
        ghost_nodes(count_g, 2) = Ten_cell_up(ghost_up_cell_ind, 2)
        ghost_nodes(count_g, 3) = 4
    REPEAT

    INTEGER count_4 = 0

    LOOP FOR i = 1 TO nx*nz
        count_4 = count_4 + 1

        T_con(4*count_4-3+3*count_1+2*count_2+count_3, 1) = 4*nx*nz + 1 + 4*(i-1)
        T_con(4*count_4-3+3*count_1+2*count_2+count_3, 2) = 4 + 4*(i-1)
        T_con(4*count_4-2+3*count_1+2*count_2+count_3, 1) = 4*nx*nz + 2 + 4*(i-1)
        T_con(4*count_4-2+3*count_1+2*count_2+count_3, 2) = 1 + 4*(i-1)
        T_con(4*count_4-1+3*count_1+2*count_2+count_3, 1) = 4*nx*nz + 3 + 4*(i-1)
        T_con(4*count_4-1+3*count_1+2*count_2+count_3, 2) = 2 + 4*(i-1)
        T_con(4*count_4+3*count_1+2*count_2+count_3, 1)   = 4*nx*nz + 4 + 4*(i-1)
        T_con(4*count_4+3*count_1+2*count_2+count_3, 2)   = 3 + 4*(i-1)

        l_0(4*count_4-3+3*count_1+2*count_2+count_3) = l_i_0
        l_0(4*count_4-2+3*count_1+2*count_2+count_3) = l_i_0
        l_0(4*count_4-1+3*count_1+2*count_2+count_3) = l_i_0
        l_0(4*count_4+3*count_1+2*count_2+count_3)   = l_i_0
    REPEAT
END T_comp 


SUBROUTINE f_n_comp(ARRAY(*) OF REAL f_n^; INTEGER n_N_dof; INTEGER n_N; INTEGER n_T; INTEGER n_G; INTEGER nx; INTEGER ny; REAL l_per; REAL l_b; REAL k; REAL sigma; ARRAY(*) OF REAL q_tilde; ARRAY(*) OF REAL X_0; ARRAY(*) OF REAL l_0; ARRAY(*,*) OF INTEGER T_con; ARRAY(*,*) OF INTEGER ghost_nodes)
    
    ARRAY(3) OF REAL f_t, l_i, l_i_dot

    REAL l_i_norm
    
    ARRAY(3*n_G) OF REAL f_n_ghost
    LOOP FOR i = 1 TO n_G
        f_n_ghost = 0
    REPEAT
    
    INTEGER ind_A, ind_B, ind_G

    ARRAY(n_N_dof) OF REAL X     = 0
    ARRAY(n_N_dof) OF REAL X_dot = 0
    
    X_comp(X, n_N_dof, n_N, n_G, nx, ny, l_per, l_b, q_tilde, X_0, ghost_nodes)
    X_dot_comp(X_dot, n_N_dof, n_N, n_G, l_b, q_tilde, ghost_nodes)
    
    LOOP FOR i = 1 TO n_T
        ind_A = T_con(i, 1)
        ind_B = T_con(i, 2)

        l_i(1) = X(3*ind_B-2) - X(3*ind_A-2)
        l_i(2) = X(3*ind_B-1) - X(3*ind_A-1)
        l_i(3) = X(3*ind_B)   - X(3*ind_A)
        
        l_i_dot(1) = X_dot(3*ind_B-2) - X_dot(3*ind_A-2)
        l_i_dot(2) = X_dot(3*ind_B-1) - X_dot(3*ind_A-1)
        l_i_dot(3) = X_dot(3*ind_B)   - X_dot(3*ind_A)

        l_i_norm = SQRT(l_i(1)^2+l_i(2)^2+l_i(3)^2)

        IF l_i_norm >= l_0(i) THEN
            f_t(1) = k/l_0(i)*(l_i_norm - l_0(i))*l_i(1)/l_i_norm + sigma*l_i_dot(1)
            f_t(2) = k/l_0(i)*(l_i_norm - l_0(i))*l_i(2)/l_i_norm + sigma*l_i_dot(2)
            f_t(3) = k/l_0(i)*(l_i_norm - l_0(i))*l_i(3)/l_i_norm + sigma*l_i_dot(3)
        ELSE
            f_t(1) = 0
            f_t(2) = 0
            f_t(3) = 0
        END IF

        IF ind_A <= (n_N-n_G)/2 THEN
            f_n(3*ind_A-2) = f_n(3*ind_A-2) + f_t(1)
            f_n(3*ind_A-1) = f_n(3*ind_A-1) + f_t(2)
            f_n(3*ind_A)   = f_n(3*ind_A) + f_t(3)
        ELSE IF ind_A > n_N-n_G THEN
            ind_G = ind_A - (n_N-n_G)

            f_n_ghost(3*ind_G-2) = f_n_ghost(3*ind_G-2) + f_t(1)
            f_n_ghost(3*ind_G-1) = f_n_ghost(3*ind_G-1) + f_t(2)
            f_n_ghost(3*ind_G)   = f_n_ghost(3*ind_G) + f_t(3)
        END IF

        IF ind_B <= (n_N-n_G)/2 THEN
            f_n(3*ind_B-2) = f_n(3*ind_B-2) - f_t(1)
            f_n(3*ind_B-1) = f_n(3*ind_B-1) - f_t(2)
            f_n(3*ind_B)   = f_n(3*ind_B) - f_t(3)
        ELSE IF ind_B > n_N-n_G THEN
            ind_G = ind_B - (n_N-n_G)

            f_n_ghost(3*ind_G-2) = f_n_ghost(3*ind_G-2) - f_t(1)
            f_n_ghost(3*ind_G-1) = f_n_ghost(3*ind_G-1) - f_t(2)
            f_n_ghost(3*ind_G)   = f_n_ghost(3*ind_G) - f_t(3)
        END IF
    REPEAT
    
    LOOP FOR i = 1 TO n_G
        parent_ind = ghost_nodes(i, 2)

        f_n(3*parent_ind-2) = f_n(3*parent_ind-2) + f_n_ghost(3*i-2)
        f_n(3*parent_ind-1) = f_n(3*parent_ind-1) + f_n_ghost(3*i-1)
        f_n(3*parent_ind)   = f_n(3*parent_ind) + f_n_ghost(3*i)
    REPEAT
END f_n_comp


SUBROUTINE Cq_dot_compute(ARRAY(*) OF REAL Cq_dot^; INTEGER n_q_tilde; INTEGER n_B; REAL I_0; ARRAY(*) OF REAL q_tilde)

    LOOP FOR i = 1 TO n_B
        Cq_dot(2*i-1) = -0.5*I_0*SIN(2*q_tilde(2*i-1+FLOOR(n_q_tilde/2)))*q_tilde(2*i)^2
        Cq_dot(2*i)   = I_0*SIN(2*q_tilde(2*i-1+FLOOR(n_q_tilde/2)))*q_tilde(2*i-1)*q_tilde(2*i)
    REPEAT
END Cq_dot_compute


SUBROUTINE f_mom_comp(ARRAY(*) OF REAL f_mom^; INTEGER n_q; INTEGER n_q_tilde; REAL l_b; ARRAY(*) OF REAL f_n; ARRAY(*) OF REAL q_tilde)

    LOOP FOR i = 1 TO FLOOR(n_q/2)
        f_mom(2*i-1) = l_b*[COS(q_tilde(2*i-1+n_q))*COS(q_tilde(2*i+n_q))*f_n(3*i-2) + COS(q_tilde(2*i-1+n_q))*SIN(q_tilde(2*i+n_q))*f_n(3*i-1) - SIN(q_tilde(2*i-1+n_q))*f_n(3*i)]
        f_mom(2*i)   = l_b*[-SIN(q_tilde(2*i-1+n_q))*SIN(q_tilde(2*i+n_q))*f_n(3*i-2) + SIN(q_tilde(2*i-1+n_q))*COS(q_tilde(2*i+n_q))*f_n(3*i-1)]
    REPEAT
END f_mom_comp


SUBROUTINE P_comp(ARRAY(*,3,2) OF INTEGER P_mat^; ARRAY(*,*) OF INTEGER ghost_nodes; INTEGER nx; INTEGER nz; INTEGER n_C; INTEGER n_T; INTEGER n_G)

    INTEGER ghost_ind = 0
    INTEGER floor_ind = 0

    LOOP FOR j = 1 TO nx
        LOOP FOR i = 1 TO nz
            ind = i + (j-1)*nz

            IF i = 1 AND j = 1 THEN
                P_mat(1+floor_ind, 1, 1) = 1
                P_mat(1+floor_ind, 2, 1) = ghost_nodes(1, 1)
                P_mat(1+floor_ind, 3, 1) = ghost_nodes(nz+1, 1)

                P_mat(2+floor_ind, 1, 1) = ghost_nodes(1, 1)
                P_mat(2+floor_ind, 2, 1) = 4*(nz+1) - 2
                P_mat(2+floor_ind, 3, 1) = ghost_nodes(nz+1, 1)

                P_mat(3+floor_ind, 1, 1) = ghost_nodes(1, 1)
                P_mat(3+floor_ind, 2, 1) = 4*2 - 3
                P_mat(3+floor_ind, 3, 1) = 4*(nz+1) - 2

                P_mat(4+floor_ind, 1, 1) = ghost_nodes(1, 1)
                P_mat(4+floor_ind, 2, 1) = 2
                P_mat(4+floor_ind, 3, 1) = 4*2 - 3

                P_mat(5+floor_ind, 1, 1) = ghost_nodes(nz+1, 1)
                P_mat(5+floor_ind, 2, 1) = 4*(nz+1) - 2
                P_mat(5+floor_ind, 3, 1) = 4

                P_mat(6+floor_ind, 1, 1) = 4*(nz+1) - 2
                P_mat(6+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(6+floor_ind, 3, 1) = 3

                floor_ind = floor_ind + 6
            END IF

            IF i > 1 AND i < nz AND j = 1 THEN
                P_mat(1+floor_ind, 1, 1) = 4*ind - 3
                P_mat(1+floor_ind, 2, 1) = ghost_nodes(i, 1)
                P_mat(1+floor_ind, 3, 1) = 4*(ind-1) - 1

                P_mat(2+floor_ind, 1, 1) = ghost_nodes(i, 1)
                P_mat(2+floor_ind, 2, 1) = 4*(ind+nz) - 2
                P_mat(2+floor_ind, 3, 1) = 4*(ind-1) - 1

                P_mat(3+floor_ind, 1, 1) = ghost_nodes(i, 1)
                P_mat(3+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(3+floor_ind, 3, 1) = 4*(ind+nz) - 2

                P_mat(4+floor_ind, 1, 1) = ghost_nodes(i, 1)
                P_mat(4+floor_ind, 2, 1) = 4*ind - 2
                P_mat(4+floor_ind, 3, 1) = 4*(ind+1) - 3

                P_mat(5+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(5+floor_ind, 2, 1) = 4*(ind+nz) - 2
                P_mat(5+floor_ind, 3, 1) = 4*ind

                P_mat(6+floor_ind, 1, 1) = 4*(ind+nz) - 2
                P_mat(6+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(6+floor_ind, 3, 1) = 4*ind - 1

                floor_ind = floor_ind + 6
            END IF

            IF i = nz AND j = 1 THEN
                P_mat(1+floor_ind, 1, 1) = 4*ind - 3
                P_mat(1+floor_ind, 2, 1) = ghost_nodes(i, 1)
                P_mat(1+floor_ind, 3, 1) = 4*(ind-1) - 1

                P_mat(2+floor_ind, 1, 1) = ghost_nodes(i, 1)
                P_mat(2+floor_ind, 2, 1) = 4*(ind+nz) - 2
                P_mat(2+floor_ind, 3, 1) = 4*(ind-1) - 1

                P_mat(3+floor_ind, 1, 1) = ghost_nodes(i, 1)
                P_mat(3+floor_ind, 2, 1) = ghost_nodes(nz+nx+1, 1)
                P_mat(3+floor_ind, 3, 1) = 4*(ind+nz) - 2

                P_mat(4+floor_ind, 1, 1) = ghost_nodes(i, 1)
                P_mat(4+floor_ind, 2, 1) = 4*ind - 2
                P_mat(4+floor_ind, 3, 1) = ghost_nodes(nz+nx+1, 1)

                P_mat(5+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(5+floor_ind, 2, 1) = 4*(ind+nz) - 2
                P_mat(5+floor_ind, 3, 1) = 4*ind

                P_mat(6+floor_ind, 1, 1) = 4*(ind+nz) - 2
                P_mat(6+floor_ind, 2, 1) = ghost_nodes(nz+nx+1, 1)
                P_mat(6+floor_ind, 3, 1) = 4*ind - 1

                floor_ind = floor_ind + 6
            END IF

            IF i = 1 AND j > 1 AND j < nx THEN
                P_mat(1+floor_ind, 1, 1) = 4*ind - 3
                P_mat(1+floor_ind, 2, 1) = 4*(ind-nz)
                P_mat(1+floor_ind, 3, 1) = ghost_nodes(nz+j, 1)

                P_mat(2+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(2+floor_ind, 2, 1) = 4*(ind+nz) - 2
                P_mat(2+floor_ind, 3, 1) = ghost_nodes(nz+j, 1)

                P_mat(3+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(3+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(3+floor_ind, 3, 1) = 4*(ind+nz) - 2

                P_mat(4+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(4+floor_ind, 2, 1) = 4*ind - 2
                P_mat(4+floor_ind, 3, 1) = 4*(ind+1) - 3

                P_mat(5+floor_ind, 1, 1) = ghost_nodes(nz+j, 1)
                P_mat(5+floor_ind, 2, 1) = 4*(ind+nz) - 2
                P_mat(5+floor_ind, 3, 1) = 4*ind

                P_mat(6+floor_ind, 1, 1) = 4*(ind+nz) - 2
                P_mat(6+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(6+floor_ind, 3, 1) = 4*ind - 1

                floor_ind = floor_ind + 6
            END IF

            IF j > 1 AND j < nx AND i > 1 AND i < nz THEN
                P_mat(1+floor_ind, 1, 1) = 4*(ind-1) - 2
                P_mat(1+floor_ind, 2, 1) = 4*(ind-1-nz) - 1
                P_mat(1+floor_ind, 3, 1) = 4*ind - 3

                P_mat(2+floor_ind, 1, 1) = 4*ind - 3
                P_mat(2+floor_ind, 2, 1) = 4*(ind-1-nz) - 1
                P_mat(2+floor_ind, 3, 1) = 4*(ind-nz)

                P_mat(3+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(3+floor_ind, 2, 1) = 4*ind - 3
                P_mat(3+floor_ind, 3, 1) = 4*(ind-nz)

                P_mat(4+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(4+floor_ind, 2, 1) = 4*(ind-nz)
                P_mat(4+floor_ind, 3, 1) = 4*(ind+nz) - 2

                P_mat(5+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(5+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(5+floor_ind, 3, 1) = 4*(ind+nz) - 2

                P_mat(6+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(6+floor_ind, 2, 1) = 4*ind - 2
                P_mat(6+floor_ind, 3, 1) = 4*(ind+1) - 3

                P_mat(7+floor_ind, 1, 1) = 4*ind
                P_mat(7+floor_ind, 2, 1) = 4*(ind-1) - 1
                P_mat(7+floor_ind, 3, 1) = 4*(ind+nz) - 2

                P_mat(8+floor_ind, 1, 1) = 4*(ind+nz) - 2
                P_mat(8+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(8+floor_ind, 3, 1) = 4*ind - 1

                floor_ind = 8 + floor_ind
            END IF

            IF i = nz AND j > 1 AND j < nx THEN
                P_mat(1+floor_ind, 1, 1) = 4*(ind-1) - 2
                P_mat(1+floor_ind, 2, 1) = 4*(ind-1-nz) - 1
                P_mat(1+floor_ind, 3, 1) = 4*ind - 3

                P_mat(2+floor_ind, 1, 1) = 4*ind - 3
                P_mat(2+floor_ind, 2, 1) = 4*(ind-1-nz) - 1
                P_mat(2+floor_ind, 3, 1) = 4*(ind-nz)

                P_mat(3+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(3+floor_ind, 2, 1) = 4*ind - 3
                P_mat(3+floor_ind, 3, 1) = 4*(ind-nz)

                P_mat(4+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(4+floor_ind, 2, 1) = 4*(ind-nz)
                P_mat(4+floor_ind, 3, 1) = 4*(ind+nz) - 2

                P_mat(5+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(5+floor_ind, 2, 1) = ghost_nodes(nz+nx+j, 1)
                P_mat(5+floor_ind, 3, 1) = 4*(ind+nz) - 2

                P_mat(6+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(6+floor_ind, 2, 1) = 4*ind - 2
                P_mat(6+floor_ind, 3, 1) = ghost_nodes(nz+nx+j, 1)

                P_mat(7+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(7+floor_ind, 2, 1) = 4*(ind+nz) - 2
                P_mat(7+floor_ind, 3, 1) = 4*ind

                P_mat(8+floor_ind, 1, 1) = 4*(ind+nz) - 2
                P_mat(8+floor_ind, 2, 1) = ghost_nodes(nz+nx+j, 1)
                P_mat(8+floor_ind, 3, 1) = 4*ind - 1

                floor_ind = 8 + floor_ind
            END IF

            IF i = 1 AND j = nx THEN
                P_mat(1+floor_ind, 1, 1) = 4*ind - 3
                P_mat(1+floor_ind, 2, 1) = 4*(ind-nz)
                P_mat(1+floor_ind, 3, 1) = ghost_nodes(nz+nx, 1)

                P_mat(2+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(2+floor_ind, 2, 1) = ghost_nodes(nz+2*nx+1, 1)
                P_mat(2+floor_ind, 3, 1) = ghost_nodes(nz+nx, 1)

                P_mat(3+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(3+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(3+floor_ind, 3, 1) = ghost_nodes(nz+2*nx+1, 1)

                P_mat(4+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(4+floor_ind, 2, 1) = 4*ind - 2
                P_mat(4+floor_ind, 3, 1) = 4*(ind+1) - 3

                P_mat(5+floor_ind, 1, 1) = ghost_nodes(nz+nx, 1)
                P_mat(5+floor_ind, 2, 1) = ghost_nodes(nz+2*nx+1, 1)
                P_mat(5+floor_ind, 3, 1) = 4*ind

                P_mat(6+floor_ind, 1, 1) = ghost_nodes(nz+2*nx+1, 1)
                P_mat(6+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(6+floor_ind, 3, 1) = 4*ind - 1

                floor_ind = floor_ind + 6
            END IF

            IF i > 1 AND i < nz AND j = nx THEN
                P_mat(1+floor_ind, 1, 1) = 4*(ind-1) - 2
                P_mat(1+floor_ind, 2, 1) = 4*(ind-1-nz) - 1
                P_mat(1+floor_ind, 3, 1) = 4*ind - 3

                P_mat(2+floor_ind, 1, 1) = 4*ind - 3
                P_mat(2+floor_ind, 2, 1) = 4*(ind-1-nz) - 1
                P_mat(2+floor_ind, 3, 1) = 4*(ind-nz)

                P_mat(3+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(3+floor_ind, 2, 1) = 4*(ind-1) - 1
                P_mat(3+floor_ind, 3, 1) = 4*ind - 3

                P_mat(4+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(4+floor_ind, 2, 1) = 4*(ind-nz)
                P_mat(4+floor_ind, 3, 1) = ghost_nodes(nz+2*nx+i, 1)

                P_mat(5+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(5+floor_ind, 2, 1) = 4*(ind+1) - 3
                P_mat(5+floor_ind, 3, 1) = ghost_nodes(nz+2*nx+i, 1)

                P_mat(6+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(6+floor_ind, 2, 1) = 4*ind - 2
                P_mat(6+floor_ind, 3, 1) = 4*(ind+1) - 3

                P_mat(7+floor_ind, 1, 1) = 4*ind
                P_mat(7+floor_ind, 2, 1) = 4*(ind-1) - 1
                P_mat(7+floor_ind, 3, 1) = ghost_nodes(nz+2*nx+i, 1)

                P_mat(8+floor_ind, 1, 1) = 4*(ind+1) - 3
                P_mat(8+floor_ind, 2, 1) = 4*ind - 1
                P_mat(8+floor_ind, 3, 1) = ghost_nodes(nz+2*nx+i, 1)

                floor_ind = 8 + floor_ind
            END IF

            IF i = nz AND j = nx THEN
                P_mat(1+floor_ind, 1, 1) = 4*(ind-1) - 2
                P_mat(1+floor_ind, 2, 1) = 4*(ind-1-nz) - 1
                P_mat(1+floor_ind, 3, 1) = 4*ind - 3

                P_mat(2+floor_ind, 1, 1) = 4*ind - 3
                P_mat(2+floor_ind, 2, 1) = 4*(ind-1-nz) - 1
                P_mat(2+floor_ind, 3, 1) = 4*(ind-nz)

                P_mat(3+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(3+floor_ind, 2, 1) = 4*(ind-1) - 1
                P_mat(3+floor_ind, 3, 1) = 4*ind - 3

                P_mat(4+floor_ind, 1, 1) = 4*(ind-1) - 1
                P_mat(4+floor_ind, 2, 1) = 4*(ind-nz)
                P_mat(4+floor_ind, 3, 1) = ghost_nodes(2*nz+2*nx, 1)

                P_mat(5+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(5+floor_ind, 2, 1) = ghost_nodes(nz+2*nx, 1)
                P_mat(5+floor_ind, 3, 1) = ghost_nodes(2*nz+2*nx, 1)

                P_mat(6+floor_ind, 1, 1) = 4*(ind-nz)
                P_mat(6+floor_ind, 2, 1) = 4*ind - 2
                P_mat(6+floor_ind, 3, 1) = ghost_nodes(nz+2*nx, 1)

                P_mat(7+floor_ind, 1, 1) = 4*ind
                P_mat(7+floor_ind, 2, 1) = 4*(ind-1) - 1
                P_mat(7+floor_ind, 3, 1) = ghost_nodes(2*nz+2*nx, 1)

                P_mat(8+floor_ind, 1, 1) = ghost_nodes(nz+2*nx, 1)
                P_mat(8+floor_ind, 2, 1) = 4*ind - 1
                P_mat(8+floor_ind, 3, 1) = ghost_nodes(2*nz+2*nx, 1)

                floor_ind = 8 + floor_ind
            END IF
        REPEAT
    REPEAT

    ! Patch periodiche

    P_mat(1+floor_ind, 1, 1) = 4*((nx-1)*nz)
    P_mat(1+floor_ind, 1, 2) = 1
    P_mat(1+floor_ind, 2, 1) = 4*(nz + (nx-1)*nz-1) - 1
    P_mat(1+floor_ind, 2, 2) = 1
    P_mat(1+floor_ind, 3, 1) = 4*(nz + (nx-1)*nz) - 3
    P_mat(1+floor_ind, 3, 2) = 1

    P_mat(2+floor_ind, 1, 1) = 4*(nz*nx-1) - 1
    P_mat(2+floor_ind, 1, 2) = 1
    P_mat(2+floor_ind, 2, 1) = 4*((nx-1)*nz)
    P_mat(2+floor_ind, 2, 2) = 1
    P_mat(2+floor_ind, 3, 1) = 4*nz - 2
    P_mat(2+floor_ind, 3, 2) = 2

    P_mat(3+floor_ind, 1, 1) = 4*((nx-1)*nz)
    P_mat(3+floor_ind, 1, 2) = 1
    P_mat(3+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(3+floor_ind, 2, 2) = 3
    P_mat(3+floor_ind, 3, 1) = 4*nz - 2
    P_mat(3+floor_ind, 3, 2) = 2

    P_mat(4+floor_ind, 1, 1) = 4*((nx-1)*nz)
    P_mat(4+floor_ind, 1, 2) = 1
    P_mat(4+floor_ind, 2, 1) = 4*nz*nx - 2
    P_mat(4+floor_ind, 2, 2) = 1
    P_mat(4+floor_ind, 3, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(4+floor_ind, 3, 2) = 3

    P_mat(5+floor_ind, 1, 1) = 4*nz*nx
    P_mat(5+floor_ind, 1, 2) = 1 
    P_mat(5+floor_ind, 2, 1) = 4*(nz + (nx-1)*nz-1) - 1
    P_mat(5+floor_ind, 2, 2) = 1
    P_mat(5+floor_ind, 3, 1) = 4*nz - 2
    P_mat(5+floor_ind, 3, 2) = 2

    P_mat(6+floor_ind, 1, 1) = 4*nz - 2
    P_mat(6+floor_ind, 1, 2) = 2
    P_mat(6+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(6+floor_ind, 2, 2) = 3
    P_mat(6+floor_ind, 3, 1) = 4*nz*nx - 1
    P_mat(6+floor_ind, 3, 2) = 1

    P_mat(7+floor_ind, 1, 1) = 4*nz - 2
    P_mat(7+floor_ind, 1, 2) = 2
    P_mat(7+floor_ind, 2, 1) = 4*nz*nx - 1
    P_mat(7+floor_ind, 2, 2) = 1
    P_mat(7+floor_ind, 3, 1) = 1
    P_mat(7+floor_ind, 3, 2) = 0

    P_mat(8+floor_ind, 1, 1) = 1
    P_mat(8+floor_ind, 1, 2) = 0
    P_mat(8+floor_ind, 2, 1) = 4*nz*nx - 1
    P_mat(8+floor_ind, 2, 2) = 1
    P_mat(8+floor_ind, 3, 1) = 4*(1+(nx-1)*nz)
    P_mat(8+floor_ind, 3, 2) = 3

    floor_ind = floor_ind + 8

    P_mat(1+floor_ind, 1, 1) = 4*(1+(nx-2)*nz)
    P_mat(1+floor_ind, 1, 2) = 3
    P_mat(1+floor_ind, 2, 1) = 4*nz*nx - 1
    P_mat(1+floor_ind, 2, 2) = 1
    P_mat(1+floor_ind, 3, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(1+floor_ind, 3, 2) = 3

    P_mat(2+floor_ind, 1, 1) = 4*nz*nx - 1
    P_mat(2+floor_ind, 1, 2) = 1
    P_mat(2+floor_ind, 2, 1) = 4*(1+(nx-2)*nz)
    P_mat(2+floor_ind, 2, 2) = 3
    P_mat(2+floor_ind, 3, 1) = 2
    P_mat(2+floor_ind, 3, 2) = 0

    P_mat(3+floor_ind, 1, 1) = 4*(1+(nx-2)*nz)
    P_mat(3+floor_ind, 1, 2) = 3
    P_mat(3+floor_ind, 2, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(3+floor_ind, 2, 2) = 3
    P_mat(3+floor_ind, 3, 1) = 2
    P_mat(3+floor_ind, 3, 2) = 0

    P_mat(4+floor_ind, 1, 1) = 4*(1+(nx-1)*nz) - 2
    P_mat(4+floor_ind, 1, 2) = 3
    P_mat(4+floor_ind, 2, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(4+floor_ind, 2, 2) = 3
    P_mat(4+floor_ind, 3, 1) = 4*(1+(nx-2)*nz)
    P_mat(4+floor_ind, 3, 2) = 3

    P_mat(5+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(5+floor_ind, 1, 2) = 3
    P_mat(5+floor_ind, 2, 1) = 4*nz*nx - 1
    P_mat(5+floor_ind, 2, 2) = 1
    P_mat(5+floor_ind, 3, 1) = 2
    P_mat(5+floor_ind, 3, 2) = 0

    P_mat(6+floor_ind, 1, 1) = 2
    P_mat(6+floor_ind, 1, 2) = 0
    P_mat(6+floor_ind, 2, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(6+floor_ind, 2, 2) = 3
    P_mat(6+floor_ind, 3, 1) = 4*(1+(nx-1)*nz) - 1
    P_mat(6+floor_ind, 3, 2) = 3

    P_mat(7+floor_ind, 1, 1) = 2
    P_mat(7+floor_ind, 1, 2) = 0
    P_mat(7+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 1
    P_mat(7+floor_ind, 2, 2) = 3
    P_mat(7+floor_ind, 3, 1) = 5
    P_mat(7+floor_ind, 3, 2) = 0

    P_mat(8+floor_ind, 1, 1) = 5
    P_mat(8+floor_ind, 1, 2) = 0
    P_mat(8+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 1
    P_mat(8+floor_ind, 2, 2) = 3
    P_mat(8+floor_ind, 3, 1) = 4*(2+(nx-1)*nz)
    P_mat(8+floor_ind, 3, 2) = 3

    floor_ind = floor_ind + 8

    LOOP FOR i = 2 TO nz-1
        P_mat(1+floor_ind, 1, 1) = 4*(i+(nx-2)*nz)
        P_mat(1+floor_ind, 1, 2) = 3
        P_mat(1+floor_ind, 2, 1) = 4*(i-1+(nx-1)*nz) - 1
        P_mat(1+floor_ind, 2, 2) = 3
        P_mat(1+floor_ind, 3, 1) = 4*(i+(nx-1)*nz) - 3
        P_mat(1+floor_ind, 3, 2) = 3

        P_mat(2+floor_ind, 1, 1) = 4*(i-1+(nx-1)*nz) - 1
        P_mat(2+floor_ind, 1, 2) = 3
        P_mat(2+floor_ind, 2, 1) = 4*(i+(nx-2)*nz)
        P_mat(2+floor_ind, 2, 2) = 3
        P_mat(2+floor_ind, 3, 1) = 4*i - 2
        P_mat(2+floor_ind, 3, 2) = 0

        P_mat(3+floor_ind, 1, 1) = 4*(i+(nx-2)*nz)
        P_mat(3+floor_ind, 1, 2) = 3
        P_mat(3+floor_ind, 2, 1) = 4*(i+1+(nx-1)*nz) - 3
        P_mat(3+floor_ind, 2, 2) = 3
        P_mat(3+floor_ind, 3, 1) = 4*i - 2
        P_mat(3+floor_ind, 3, 2) = 0

        P_mat(4+floor_ind, 1, 1) = 4*(i+(nx-1)*nz) - 2
        P_mat(4+floor_ind, 1, 2) = 3
        P_mat(4+floor_ind, 2, 1) = 4*(i+1+(nx-1)*nz) - 3
        P_mat(4+floor_ind, 2, 2) = 3
        P_mat(4+floor_ind, 3, 1) = 4*(i+(nx-2)*nz)
        P_mat(4+floor_ind, 3, 2) = 3

        P_mat(5+floor_ind, 1, 1) = 4*(i+(nx-1)*nz)
        P_mat(5+floor_ind, 1, 2) = 3
        P_mat(5+floor_ind, 2, 1) = 4*(i-1+(nx-1)*nz) - 1
        P_mat(5+floor_ind, 2, 2) = 3
        P_mat(5+floor_ind, 3, 1) = 4*i - 2
        P_mat(5+floor_ind, 3, 2) = 0

        P_mat(6+floor_ind, 1, 1) = 4*i - 2
        P_mat(6+floor_ind, 1, 2) = 0
        P_mat(6+floor_ind, 2, 1) = 4*(i+1+(nx-1)*nz) - 3
        P_mat(6+floor_ind, 2, 2) = 3
        P_mat(6+floor_ind, 3, 1) = 4*(i+(nx-1)*nz) - 1
        P_mat(6+floor_ind, 3, 2) = 3

        P_mat(7+floor_ind, 1, 1) = 4*i - 2
        P_mat(7+floor_ind, 1, 2) = 0
        P_mat(7+floor_ind, 2, 1) = 4*(i+(nx-1)*nz) - 1
        P_mat(7+floor_ind, 2, 2) = 3
        P_mat(7+floor_ind, 3, 1) = 4*(i+1) - 3
        P_mat(7+floor_ind, 3, 2) = 0

        P_mat(8+floor_ind, 1, 1) = 4*(i+1) - 3
        P_mat(8+floor_ind, 1, 2) = 0
        P_mat(8+floor_ind, 2, 1) = 4*(i+(nx-1)*nz) - 1
        P_mat(8+floor_ind, 2, 2) = 3
        P_mat(8+floor_ind, 3, 1) = 4*(i+1+(nx-1)*nz)
        P_mat(8+floor_ind, 3, 2) = 3

        floor_ind = floor_ind + 8
    REPEAT

    P_mat(1+floor_ind, 1, 1) = 4*(nz*nx-nz)
    P_mat(1+floor_ind, 1, 2) = 3
    P_mat(1+floor_ind, 2, 1) = 4*(nz*nx-1) - 1
    P_mat(1+floor_ind, 2, 2) = 3
    P_mat(1+floor_ind, 3, 1) = 4*nz*nx - 3
    P_mat(1+floor_ind, 3, 2) = 3

    P_mat(2+floor_ind, 1, 1) = 4*(nz*nx-1) - 1
    P_mat(2+floor_ind, 1, 2) = 3
    P_mat(2+floor_ind, 2, 1) = 4*(nz*nx-nz)
    P_mat(2+floor_ind, 2, 2) = 3
    P_mat(2+floor_ind, 3, 1) = 4*nz - 2
    P_mat(2+floor_ind, 3, 2) = 0

    P_mat(3+floor_ind, 1, 1) = 4*(nz*nx-nz)
    P_mat(3+floor_ind, 1, 2) = 3
    P_mat(3+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(3+floor_ind, 2, 2) = 4
    P_mat(3+floor_ind, 3, 1) = 4*nz - 2
    P_mat(3+floor_ind, 3, 2) = 0

    P_mat(4+floor_ind, 1, 1) = 4*nz*nx - 2
    P_mat(4+floor_ind, 1, 2) = 3
    P_mat(4+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(4+floor_ind, 2, 2) = 4
    P_mat(4+floor_ind, 3, 1) = 4*(nz*nx-nz)
    P_mat(4+floor_ind, 3, 2) = 3

    P_mat(5+floor_ind, 1, 1) = 4*nz*nx
    P_mat(5+floor_ind, 1, 2) = 3
    P_mat(5+floor_ind, 2, 1) = 4*(nz*nx-1) - 1
    P_mat(5+floor_ind, 2, 2) = 3
    P_mat(5+floor_ind, 3, 1) = 4*nz - 2
    P_mat(5+floor_ind, 3, 2) = 0

    P_mat(6+floor_ind, 1, 1) = 4*nz - 2
    P_mat(6+floor_ind, 1, 2) = 0
    P_mat(6+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(6+floor_ind, 2, 2) = 4
    P_mat(6+floor_ind, 3, 1) = 4*nz*nx - 1
    P_mat(6+floor_ind, 3, 2) = 3

    P_mat(7+floor_ind, 1, 1) = 4*nz - 2
    P_mat(7+floor_ind, 1, 2) = 0
    P_mat(7+floor_ind, 2, 1) = 4*nz*nx - 1
    P_mat(7+floor_ind, 2, 2) = 3
    P_mat(7+floor_ind, 3, 1) = 1
    P_mat(7+floor_ind, 3, 2) = 5

    P_mat(8+floor_ind, 1, 1) = 1
    P_mat(8+floor_ind, 1, 2) = 5
    P_mat(8+floor_ind, 2, 1) = 4*nz*nx - 1
    P_mat(8+floor_ind, 2, 2) = 3
    P_mat(8+floor_ind, 3, 1) = 4*(1+(nx-1)*nz)
    P_mat(8+floor_ind, 3, 2) = 4

    floor_ind = floor_ind + 8

    P_mat(1+floor_ind, 1, 1) = 4*(1+(nx-2)*nz)
    P_mat(1+floor_ind, 1, 2) = 4
    P_mat(1+floor_ind, 2, 1) = 4*nz*nx - 1
    P_mat(1+floor_ind, 2, 2) = 3
    P_mat(1+floor_ind, 3, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(1+floor_ind, 3, 2) = 4

    P_mat(2+floor_ind, 1, 1) = 4*nz*nx - 1
    P_mat(2+floor_ind, 1, 2) = 3
    P_mat(2+floor_ind, 2, 1) = 4*(1+(nx-2)*nz)
    P_mat(2+floor_ind, 2, 2) = 4
    P_mat(2+floor_ind, 3, 1) = 2
    P_mat(2+floor_ind, 3, 2) = 5

    P_mat(3+floor_ind, 1, 1) = 4*(1+(nx-2)*nz)
    P_mat(3+floor_ind, 1, 2) = 4
    P_mat(3+floor_ind, 2, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(3+floor_ind, 2, 2) = 4
    P_mat(3+floor_ind, 3, 1) = 2
    P_mat(3+floor_ind, 3, 2) = 5

    P_mat(4+floor_ind, 1, 1) = 4*(1+(nx-1)*nz) - 2
    P_mat(4+floor_ind, 1, 2) = 4
    P_mat(4+floor_ind, 2, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(4+floor_ind, 2, 2) = 4
    P_mat(4+floor_ind, 3, 1) = 4*(1+(nx-2)*nz)
    P_mat(4+floor_ind, 3, 2) = 4

    P_mat(5+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(5+floor_ind, 1, 2) = 4
    P_mat(5+floor_ind, 2, 1) = 4*nz*nx - 1
    P_mat(5+floor_ind, 2, 2) = 3
    P_mat(5+floor_ind, 3, 1) = 2
    P_mat(5+floor_ind, 3, 2) = 5

    P_mat(6+floor_ind, 1, 1) = 2
    P_mat(6+floor_ind, 1, 2) = 5
    P_mat(6+floor_ind, 2, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(6+floor_ind, 2, 2) = 4
    P_mat(6+floor_ind, 3, 1) = 4*(1+(nx-1)*nz) - 1
    P_mat(6+floor_ind, 3, 2) = 4

    floor_ind = floor_ind + 6

    P_mat(1+floor_ind, 1, 1) = 4*(nz*nx)
    P_mat(1+floor_ind, 1, 2) = 1
    P_mat(1+floor_ind, 2, 1) = 4*(nz-1) - 1
    P_mat(1+floor_ind, 2, 2) = 2
    P_mat(1+floor_ind, 3, 1) = 4*nz - 3
    P_mat(1+floor_ind, 3, 2) = 2

    P_mat(2+floor_ind, 1, 1) = 4*(nz-1) - 1
    P_mat(2+floor_ind, 1, 2) = 2
    P_mat(2+floor_ind, 2, 1) = 4*(nz*nx)
    P_mat(2+floor_ind, 2, 2) = 1
    P_mat(2+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(2+floor_ind, 3, 2) = 2

    P_mat(3+floor_ind, 1, 1) = 4*(nz*nx)
    P_mat(3+floor_ind, 1, 2) = 1
    P_mat(3+floor_ind, 2, 1) = 1
    P_mat(3+floor_ind, 2, 2) = 0
    P_mat(3+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(3+floor_ind, 3, 2) = 2

    P_mat(4+floor_ind, 1, 1) = 4*nz - 2
    P_mat(4+floor_ind, 1, 2) = 2
    P_mat(4+floor_ind, 2, 1) = 1
    P_mat(4+floor_ind, 2, 2) = 0
    P_mat(4+floor_ind, 3, 1) = 4*(nz*nx)
    P_mat(4+floor_ind, 3, 2) = 1

    P_mat(5+floor_ind, 1, 1) = 4*nz
    P_mat(5+floor_ind, 1, 2) = 2
    P_mat(5+floor_ind, 2, 1) = 4*(nz-1) - 1
    P_mat(5+floor_ind, 2, 2) = 2
    P_mat(5+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(5+floor_ind, 3, 2) = 2

    P_mat(6+floor_ind, 1, 1) = 4*2*nz - 2
    P_mat(6+floor_ind, 1, 2) = 2
    P_mat(6+floor_ind, 2, 1) = 1
    P_mat(6+floor_ind, 2, 2) = 0
    P_mat(6+floor_ind, 3, 1) = 4*nz - 1
    P_mat(6+floor_ind, 3, 2) = 2

    P_mat(7+floor_ind, 1, 1) = 4*2*nz - 2
    P_mat(7+floor_ind, 1, 2) = 2
    P_mat(7+floor_ind, 2, 1) = 4*nz - 1
    P_mat(7+floor_ind, 2, 2) = 2
    P_mat(7+floor_ind, 3, 1) = 4*(1+nz) - 3
    P_mat(7+floor_ind, 3, 2) = 0

    P_mat(8+floor_ind, 1, 1) = 4*(1+nz) - 3
    P_mat(8+floor_ind, 1, 2) = 0
    P_mat(8+floor_ind, 2, 1) = 4*nz - 1
    P_mat(8+floor_ind, 2, 2) = 2
    P_mat(8+floor_ind, 3, 1) = 4
    P_mat(8+floor_ind, 3, 2) = 0

    floor_ind = floor_ind + 8

    LOOP FOR j = 2 TO nx-1
        P_mat(1+floor_ind, 1, 1) = 4*(nz+(j-2)*nz)
        P_mat(1+floor_ind, 1, 2) = 2
        P_mat(1+floor_ind, 2, 1) = 4*(nz-1+(j-1)*nz) - 1
        P_mat(1+floor_ind, 2, 2) = 2
        P_mat(1+floor_ind, 3, 1) = 4*(nz+(j-1)*nz) - 3
        P_mat(1+floor_ind, 3, 2) = 2

        P_mat(2+floor_ind, 1, 1) = 4*(nz-1+(j-1)*nz) - 1
        P_mat(2+floor_ind, 1, 2) = 2
        P_mat(2+floor_ind, 2, 1) = 4*(nz+(j-2)*nz)
        P_mat(2+floor_ind, 2, 2) = 2
        P_mat(2+floor_ind, 3, 1) = 4*(nz+j*nz) - 2
        P_mat(2+floor_ind, 3, 2) = 2

        P_mat(3+floor_ind, 1, 1) = 4*(nz+(j-2)*nz)
        P_mat(3+floor_ind, 1, 2) = 2
        P_mat(3+floor_ind, 2, 1) = 4*(1+(j-1)*nz) - 3
        P_mat(3+floor_ind, 2, 2) = 0
        P_mat(3+floor_ind, 3, 1) = 4*(nz+j*nz) - 2
        P_mat(3+floor_ind, 3, 2) = 2

        P_mat(4+floor_ind, 1, 1) = 4*(nz+(j-1)*nz) - 2
        P_mat(4+floor_ind, 1, 2) = 2
        P_mat(4+floor_ind, 2, 1) = 4*(1+(j-1)*nz) - 3
        P_mat(4+floor_ind, 2, 2) = 0
        P_mat(4+floor_ind, 3, 1) = 4*(nz+(j-2)*nz)
        P_mat(4+floor_ind, 3, 2) = 2

        P_mat(5+floor_ind, 1, 1) = 4*(nz+(j-1)*nz)
        P_mat(5+floor_ind, 1, 2) = 2
        P_mat(5+floor_ind, 2, 1) = 4*(nz-1+(j-1)*nz) - 1
        P_mat(5+floor_ind, 2, 2) = 2
        P_mat(5+floor_ind, 3, 1) = 4*(nz+j*nz) - 2
        P_mat(5+floor_ind, 3, 2) = 2

        P_mat(6+floor_ind, 1, 1) = 4*(nz+j*nz) - 2
        P_mat(6+floor_ind, 1, 2) = 2
        P_mat(6+floor_ind, 2, 1) = 4*(1+(j-1)*nz) - 3
        P_mat(6+floor_ind, 2, 2) = 0
        P_mat(6+floor_ind, 3, 1) = 4*(nz+(j-1)*nz) - 1
        P_mat(6+floor_ind, 3, 2) = 2

        P_mat(7+floor_ind, 1, 1) = 4*(nz+j*nz) - 2
        P_mat(7+floor_ind, 1, 2) = 2
        P_mat(7+floor_ind, 2, 1) = 4*(nz+(j-1)*nz) - 1
        P_mat(7+floor_ind, 2, 2) = 2
        P_mat(7+floor_ind, 3, 1) = 4*(1+j*nz) - 3
        P_mat(7+floor_ind, 3, 2) = 0

        P_mat(8+floor_ind, 1, 1) = 4*(1+j*nz) - 3
        P_mat(8+floor_ind, 1, 2) = 0
        P_mat(8+floor_ind, 2, 1) = 4*(nz+(j-1)*nz) - 1
        P_mat(8+floor_ind, 2, 2) = 2
        P_mat(8+floor_ind, 3, 1) = 4*(1+(j-1)*nz)
        P_mat(8+floor_ind, 3, 2) = 0

        floor_ind = floor_ind + 8
    REPEAT

    P_mat(1+floor_ind, 1, 1) = 4*(nz+(nx-2)*nz)
    P_mat(1+floor_ind, 1, 2) = 2
    P_mat(1+floor_ind, 2, 1) = 4*(nz-1+(nx-1)*nz) - 1
    P_mat(1+floor_ind, 2, 2) = 2
    P_mat(1+floor_ind, 3, 1) = 4*(nz+(nx-1)*nz) - 3
    P_mat(1+floor_ind, 3, 2) = 2

    P_mat(2+floor_ind, 1, 1) = 4*(nz-1+(nx-1)*nz) - 1
    P_mat(2+floor_ind, 1, 2) = 2
    P_mat(2+floor_ind, 2, 1) = 4*(nz+(nx-2)*nz)
    P_mat(2+floor_ind, 2, 2) = 2
    P_mat(2+floor_ind, 3, 1) = 4*nz - 2
    P_mat(2+floor_ind, 3, 2) = 6

    P_mat(3+floor_ind, 1, 1) = 4*(nz+(nx-2)*nz)
    P_mat(3+floor_ind, 1, 2) = 2
    P_mat(3+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(3+floor_ind, 2, 2) = 0
    P_mat(3+floor_ind, 3, 1) = 4*nz - 2
    P_mat(3+floor_ind, 3, 2) = 6

    P_mat(4+floor_ind, 1, 1) = 4*(nz+(nx-1)*nz) - 2
    P_mat(4+floor_ind, 1, 2) = 2
    P_mat(4+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(4+floor_ind, 2, 2) = 0
    P_mat(4+floor_ind, 3, 1) = 4*(nz+(nx-2)*nz)
    P_mat(4+floor_ind, 3, 2) = 2

    P_mat(5+floor_ind, 1, 1) = 4*(nz+(nx-1)*nz)
    P_mat(5+floor_ind, 1, 2) = 2
    P_mat(5+floor_ind, 2, 1) = 4*(nz-1+(nx-1)*nz) - 1
    P_mat(5+floor_ind, 2, 2) = 2
    P_mat(5+floor_ind, 3, 1) = 4*nz - 2
    P_mat(5+floor_ind, 3, 2) = 6

    P_mat(6+floor_ind, 1, 1) = 4*nz - 2
    P_mat(6+floor_ind, 1, 2) = 6
    P_mat(6+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(6+floor_ind, 2, 2) = 0
    P_mat(6+floor_ind, 3, 1) = 4*(nz+(nx-1)*nz) - 1
    P_mat(6+floor_ind, 3, 2) = 2

    P_mat(7+floor_ind, 1, 1) = 4*nz - 2
    P_mat(7+floor_ind, 1, 2) = 6
    P_mat(7+floor_ind, 2, 1) = 4*(nz+(nx-1)*nz) - 1
    P_mat(7+floor_ind, 2, 2) = 2
    P_mat(7+floor_ind, 3, 1) = 1
    P_mat(7+floor_ind, 3, 2) = 7

    P_mat(8+floor_ind, 1, 1) = 4*(nz+(nx-1)*nz) - 1
    P_mat(8+floor_ind, 1, 2) = 2
    P_mat(8+floor_ind, 2, 1) = 4*(1+(nx-1)*nz)
    P_mat(8+floor_ind, 2, 2) = 0
    P_mat(8+floor_ind, 3, 1) = 1
    P_mat(8+floor_ind, 3, 2) = 7

    floor_ind = floor_ind + 8

    P_mat(1+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(1+floor_ind, 1, 2) = 4
    P_mat(1+floor_ind, 2, 1) = 4*nz - 1
    P_mat(1+floor_ind, 2, 2) = 0
    P_mat(1+floor_ind, 3, 1) = 1
    P_mat(1+floor_ind, 3, 2) = 5

    P_mat(2+floor_ind, 1, 1) = 4*nz - 1
    P_mat(2+floor_ind, 1, 2) = 0
    P_mat(2+floor_ind, 2, 1) = 4*(1+(nx-1)*nz)
    P_mat(2+floor_ind, 2, 2) = 4
    P_mat(2+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(2+floor_ind, 3, 2) = 5

    P_mat(3+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(3+floor_ind, 1, 2) = 4
    P_mat(3+floor_ind, 2, 1) = 5
    P_mat(3+floor_ind, 2, 2) = 5
    P_mat(3+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(3+floor_ind, 3, 2) = 5

    P_mat(4+floor_ind, 1, 1) = 2
    P_mat(4+floor_ind, 1, 2) = 5
    P_mat(4+floor_ind, 2, 1) = 5
    P_mat(4+floor_ind, 2, 2) = 5
    P_mat(4+floor_ind, 3, 1) = 4*(1+(nx-1)*nz)
    P_mat(4+floor_ind, 3, 2) = 4

    P_mat(5+floor_ind, 1, 1) = 4
    P_mat(5+floor_ind, 1, 2) = 5
    P_mat(5+floor_ind, 2, 1) = 4*nz - 1
    P_mat(5+floor_ind, 2, 2) = 0
    P_mat(5+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(5+floor_ind, 3, 2) = 5

    P_mat(6+floor_ind, 1, 1) = 4*(1+nz) - 2
    P_mat(6+floor_ind, 1, 2) = 5
    P_mat(6+floor_ind, 2, 1) = 5
    P_mat(6+floor_ind, 2, 2) = 5
    P_mat(6+floor_ind, 3, 1) = 3
    P_mat(6+floor_ind, 3, 2) = 5

    P_mat(7+floor_ind, 1, 1) = 4*2*nz - 2
    P_mat(7+floor_ind, 1, 2) = 0
    P_mat(7+floor_ind, 2, 1) = 4*nz - 1
    P_mat(7+floor_ind, 2, 2) = 0
    P_mat(7+floor_ind, 3, 1) = 4*(1+nz) - 3
    P_mat(7+floor_ind, 3, 2) = 5

    P_mat(8+floor_ind, 1, 1) = 4*nz - 1
    P_mat(8+floor_ind, 1, 2) = 0
    P_mat(8+floor_ind, 2, 1) = 4
    P_mat(8+floor_ind, 2, 2) = 5
    P_mat(8+floor_ind, 3, 1) = 4*(1+nz) - 3
    P_mat(8+floor_ind, 3, 2) = 5

    floor_ind = floor_ind + 8

    LOOP FOR j = 2 TO nx-1
        P_mat(1+floor_ind, 1, 1) = 4*(1+(j-2)*nz)
        P_mat(1+floor_ind, 1, 2) = 5
        P_mat(1+floor_ind, 2, 1) = 4*(nz+(j-1)*nz) - 1
        P_mat(1+floor_ind, 2, 2) = 0
        P_mat(1+floor_ind, 3, 1) = 4*(1+(j-1)*nz) - 3
        P_mat(1+floor_ind, 3, 2) = 5

        P_mat(2+floor_ind, 1, 1) = 4*(nz+(j-1)*nz) - 1
        P_mat(2+floor_ind, 1, 2) = 0
        P_mat(2+floor_ind, 2, 1) = 4*(1+(j-2)*nz)
        P_mat(2+floor_ind, 2, 2) = 5
        P_mat(2+floor_ind, 3, 1) = 4*(1+j*nz) - 2
        P_mat(2+floor_ind, 3, 2) = 5

        P_mat(3+floor_ind, 1, 1) = 4*(1+(j-2)*nz)
        P_mat(3+floor_ind, 1, 2) = 5
        P_mat(3+floor_ind, 2, 1) = 4*(2+(j-1)*nz) - 3
        P_mat(3+floor_ind, 2, 2) = 5
        P_mat(3+floor_ind, 3, 1) = 4*(1+j*nz) - 2
        P_mat(3+floor_ind, 3, 2) = 5

        P_mat(4+floor_ind, 1, 1) = 4*(1+(j-1)*nz) - 2
        P_mat(4+floor_ind, 1, 2) = 5
        P_mat(4+floor_ind, 2, 1) = 4*(2+(j-1)*nz) - 3
        P_mat(4+floor_ind, 2, 2) = 5
        P_mat(4+floor_ind, 3, 1) = 4*(1+(j-2)*nz)
        P_mat(4+floor_ind, 3, 2) = 5

        P_mat(5+floor_ind, 1, 1) = 4*(1+(j-1)*nz)
        P_mat(5+floor_ind, 1, 2) = 5
        P_mat(5+floor_ind, 2, 1) = 4*(nz+(j-1)*nz) - 1
        P_mat(5+floor_ind, 2, 2) = 0
        P_mat(5+floor_ind, 3, 1) = 4*(1+j*nz) - 2
        P_mat(5+floor_ind, 3, 2) = 5

        P_mat(6+floor_ind, 1, 1) = 4*(1+j*nz) - 2
        P_mat(6+floor_ind, 1, 2) = 5
        P_mat(6+floor_ind, 2, 1) = 4*(2+(j-1)*nz) - 3
        P_mat(6+floor_ind, 2, 2) = 5
        P_mat(6+floor_ind, 3, 1) = 4*(1+(j-1)*nz) - 1
        P_mat(6+floor_ind, 3, 2) = 5

        P_mat(7+floor_ind, 1, 1) = 4*(nz+j*nz) - 2
        P_mat(7+floor_ind, 1, 2) = 0
        P_mat(7+floor_ind, 2, 1) = 4*(nz+(j-1)*nz) - 1
        P_mat(7+floor_ind, 2, 2) = 0
        P_mat(7+floor_ind, 3, 1) = 4*(1+j*nz) - 3
        P_mat(7+floor_ind, 3, 2) = 5

        P_mat(8+floor_ind, 1, 1) = 4*(nz+(j-1)*nz) - 1
        P_mat(8+floor_ind, 1, 2) = 0
        P_mat(8+floor_ind, 2, 1) = 4*(1+(j-1)*nz)
        P_mat(8+floor_ind, 2, 2) = 5
        P_mat(8+floor_ind, 3, 1) = 4*(1+j*nz) - 3
        P_mat(8+floor_ind, 3, 2) = 5

        floor_ind = floor_ind + 8
    REPEAT

    P_mat(1+floor_ind, 1, 1) = 4*(1+(nx-2)*nz)
    P_mat(1+floor_ind, 1, 2) = 5
    P_mat(1+floor_ind, 2, 1) = 4*(nz+(nx-1)*nz) - 1
    P_mat(1+floor_ind, 2, 2) = 0
    P_mat(1+floor_ind, 3, 1) = 4*(1+(nx-1)*nz) - 3
    P_mat(1+floor_ind, 3, 2) = 5

    P_mat(2+floor_ind, 1, 1) = 4*(nz+(nx-1)*nz) - 1
    P_mat(2+floor_ind, 1, 2) = 0
    P_mat(2+floor_ind, 2, 1) = 4*(1+(nx-2)*nz)
    P_mat(2+floor_ind, 2, 2) = 5
    P_mat(2+floor_ind, 3, 1) = 2
    P_mat(2+floor_ind, 3, 2) = 8

    P_mat(3+floor_ind, 1, 1) = 4*(1+(nx-2)*nz)
    P_mat(3+floor_ind, 1, 2) = 5
    P_mat(3+floor_ind, 2, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(3+floor_ind, 2, 2) = 5
    P_mat(3+floor_ind, 3, 1) = 2
    P_mat(3+floor_ind, 3, 2) = 8

    P_mat(4+floor_ind, 1, 1) = 4*(1+(nx-1)*nz) - 2
    P_mat(4+floor_ind, 1, 2) = 5
    P_mat(4+floor_ind, 2, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(4+floor_ind, 2, 2) = 5
    P_mat(4+floor_ind, 3, 1) = 4*(1+(nx-2)*nz)
    P_mat(4+floor_ind, 3, 2) = 5

    P_mat(5+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(5+floor_ind, 1, 2) = 5
    P_mat(5+floor_ind, 2, 1) = 4*(nz+(nx-1)*nz) - 1
    P_mat(5+floor_ind, 2, 2) = 0
    P_mat(5+floor_ind, 3, 1) = 2
    P_mat(5+floor_ind, 3, 2) = 8

    P_mat(6+floor_ind, 1, 1) = 4*(1+(nx-1)*nz) - 1
    P_mat(6+floor_ind, 1, 2) = 5
    P_mat(6+floor_ind, 2, 1) = 2
    P_mat(6+floor_ind, 2, 2) = 8
    P_mat(6+floor_ind, 3, 1) = 4*(2+(nx-1)*nz) - 3
    P_mat(6+floor_ind, 3, 2) = 5

    P_mat(7+floor_ind, 1, 1) = 4*nz - 2
    P_mat(7+floor_ind, 1, 2) = 7
    P_mat(7+floor_ind, 2, 1) = 4*(nz+(nx-1)*nz) - 1
    P_mat(7+floor_ind, 2, 2) = 0
    P_mat(7+floor_ind, 3, 1) = 1
    P_mat(7+floor_ind, 3, 2) = 8

    P_mat(8+floor_ind, 1, 1) = 4*(nz+(nx-1)*nz) - 1
    P_mat(8+floor_ind, 1, 2) = 0
    P_mat(8+floor_ind, 2, 1) = 4*(1+(nx-1)*nz)
    P_mat(8+floor_ind, 2, 2) = 5
    P_mat(8+floor_ind, 3, 1) = 1
    P_mat(8+floor_ind, 3, 2) = 8

    floor_ind = floor_ind + 8

    P_mat(1+floor_ind, 1, 1) = 4*nz*nx
    P_mat(1+floor_ind, 1, 2) = 2
    P_mat(1+floor_ind, 2, 1) = 4*(nz-1) - 1
    P_mat(1+floor_ind, 2, 2) = 6
    P_mat(1+floor_ind, 3, 1) = 4*nz - 3
    P_mat(1+floor_ind, 3, 2) = 6

    P_mat(2+floor_ind, 1, 1) = 4*(nz-1) - 1
    P_mat(2+floor_ind, 1, 2) = 6
    P_mat(2+floor_ind, 2, 1) = 4*nz*nx
    P_mat(2+floor_ind, 2, 2) = 2
    P_mat(2+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(2+floor_ind, 3, 2) = 6

    P_mat(3+floor_ind, 1, 1) = 4*nz*nx
    P_mat(3+floor_ind, 1, 2) = 2
    P_mat(3+floor_ind, 2, 1) = 1
    P_mat(3+floor_ind, 2, 2) = 7
    P_mat(3+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(3+floor_ind, 3, 2) = 6

    P_mat(4+floor_ind, 1, 1) = 4*nz - 2
    P_mat(4+floor_ind, 1, 2) = 6
    P_mat(4+floor_ind, 2, 1) = 1
    P_mat(4+floor_ind, 2, 2) = 7
    P_mat(4+floor_ind, 3, 1) = 4*nz*nx
    P_mat(4+floor_ind, 3, 2) = 2

    P_mat(5+floor_ind, 1, 1) = 4*nz
    P_mat(5+floor_ind, 1, 2) = 6
    P_mat(5+floor_ind, 2, 1) = 4*(nz-1) - 1
    P_mat(5+floor_ind, 2, 2) = 6
    P_mat(5+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(5+floor_ind, 3, 2) = 6

    P_mat(6+floor_ind, 1, 1) = 4*nz - 1
    P_mat(6+floor_ind, 1, 2) = 6
    P_mat(6+floor_ind, 2, 1) = 4*2*nz - 2
    P_mat(6+floor_ind, 2, 2) = 6
    P_mat(6+floor_ind, 3, 1) = 1
    P_mat(6+floor_ind, 3, 2) = 7

    floor_ind = floor_ind + 6

    P_mat(1+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(1+floor_ind, 1, 2) = 0
    P_mat(1+floor_ind, 2, 1) = 4*nz - 1
    P_mat(1+floor_ind, 2, 2) = 6
    P_mat(1+floor_ind, 3, 1) = 1
    P_mat(1+floor_ind, 3, 2) = 7

    P_mat(2+floor_ind, 1, 1) = 4*nz - 1
    P_mat(2+floor_ind, 1, 2) = 6
    P_mat(2+floor_ind, 2, 1) = 4*(1+(nx-1)*nz)
    P_mat(2+floor_ind, 2, 2) = 0
    P_mat(2+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(2+floor_ind, 3, 2) = 7

    P_mat(3+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(3+floor_ind, 1, 2) = 0
    P_mat(3+floor_ind, 2, 1) = 5
    P_mat(3+floor_ind, 2, 2) = 7
    P_mat(3+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(3+floor_ind, 3, 2) = 7

    P_mat(4+floor_ind, 1, 1) = 2
    P_mat(4+floor_ind, 1, 2) = 7
    P_mat(4+floor_ind, 2, 1) = 5
    P_mat(4+floor_ind, 2, 2) = 7
    P_mat(4+floor_ind, 3, 1) = 4*(1+(nx-1)*nz)
    P_mat(4+floor_ind, 3, 2) = 0

    P_mat(5+floor_ind, 1, 1) = 4
    P_mat(5+floor_ind, 1, 2) = 7
    P_mat(5+floor_ind, 2, 1) = 4*nz - 1
    P_mat(5+floor_ind, 2, 2) = 6
    P_mat(5+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(5+floor_ind, 3, 2) = 7

    P_mat(6+floor_ind, 1, 1) = 3
    P_mat(6+floor_ind, 1, 2) = 7
    P_mat(6+floor_ind, 2, 1) = 4*(1+nz) - 2
    P_mat(6+floor_ind, 2, 2) = 7
    P_mat(6+floor_ind, 3, 1) = 5
    P_mat(6+floor_ind, 3, 2) = 7

    P_mat(7+floor_ind, 1, 1) = 2
    P_mat(7+floor_ind, 1, 2) = 7
    P_mat(7+floor_ind, 2, 1) = 4*(1+(nx-1)*nz) - 1
    P_mat(7+floor_ind, 2, 2) = 0
    P_mat(7+floor_ind, 3, 1) = 5
    P_mat(7+floor_ind, 3, 2) = 7

    P_mat(8+floor_ind, 1, 1) = 4*(1+(nx-1)*nz) - 1
    P_mat(8+floor_ind, 1, 2) = 0
    P_mat(8+floor_ind, 2, 1) = 4*(2+(nx-1)*nz)
    P_mat(8+floor_ind, 2, 2) = 0
    P_mat(8+floor_ind, 3, 1) = 5
    P_mat(8+floor_ind, 3, 2) = 7

    floor_ind = floor_ind + 8

    LOOP FOR i = 2 TO nz-1
        P_mat(1+floor_ind, 1, 1) = 4*(i+(nx-1)*nz)
        P_mat(1+floor_ind, 1, 2) = 0
        P_mat(1+floor_ind, 2, 1) = 4*(i-1) - 1 
        P_mat(1+floor_ind, 2, 2) = 7
        P_mat(1+floor_ind, 3, 1) = 4*i - 3
        P_mat(1+floor_ind, 3, 2) = 7

        P_mat(2+floor_ind, 1, 1) = 4*(i-1) - 1
        P_mat(2+floor_ind, 1, 2) = 7
        P_mat(2+floor_ind, 2, 1) = 4*(i+(nx-1)*nz)
        P_mat(2+floor_ind, 2, 2) = 0
        P_mat(2+floor_ind, 3, 1) = 4*(i+nz) - 2
        P_mat(2+floor_ind, 3, 2) = 7

        P_mat(3+floor_ind, 1, 1) = 4*(i+(nx-1)*nz)
        P_mat(3+floor_ind, 1, 2) = 0
        P_mat(3+floor_ind, 2, 1) = 4*(i+1) - 3
        P_mat(3+floor_ind, 2, 2) = 7
        P_mat(3+floor_ind, 3, 1) = 4*(i+nz) - 2
        P_mat(3+floor_ind, 3, 2) = 7

        P_mat(4+floor_ind, 1, 1) = 4*i - 2
        P_mat(4+floor_ind, 1, 2) = 7
        P_mat(4+floor_ind, 2, 1) = 4*(i+1) - 3
        P_mat(4+floor_ind, 2, 2) = 7
        P_mat(4+floor_ind, 3, 1) = 4*(i+(nx-1)*nz)
        P_mat(4+floor_ind, 3, 2) = 0

        P_mat(5+floor_ind, 1, 1) = 4*i
        P_mat(5+floor_ind, 1, 2) = 7
        P_mat(5+floor_ind, 2, 1) = 4*(i-1) - 1
        P_mat(5+floor_ind, 2, 2) = 7
        P_mat(5+floor_ind, 3, 1) = 4*(i+nz) - 2
        P_mat(5+floor_ind, 3, 2) = 7

        P_mat(6+floor_ind, 1, 1) = 4*i - 1
        P_mat(6+floor_ind, 1, 2) = 7
        P_mat(6+floor_ind, 2, 1) = 4*(i+nz) - 2
        P_mat(6+floor_ind, 2, 2) = 7
        P_mat(6+floor_ind, 3, 1) = 4*(i+1) - 3
        P_mat(6+floor_ind, 3, 2) = 7

        P_mat(7+floor_ind, 1, 1) = 4*i - 2
        P_mat(7+floor_ind, 1, 2) = 7
        P_mat(7+floor_ind, 2, 1) = 4*(i+(nx-1)*nz) - 1
        P_mat(7+floor_ind, 2, 2) = 0
        P_mat(7+floor_ind, 3, 1) = 4*(i+1) - 3
        P_mat(7+floor_ind, 3, 2) = 7

        P_mat(8+floor_ind, 1, 1) = 4*(i+(nx-1)*nz) - 1
        P_mat(8+floor_ind, 1, 2) = 0
        P_mat(8+floor_ind, 2, 1) = 4*(i+1+(nx-1)*nz)
        P_mat(8+floor_ind, 2, 2) = 0
        P_mat(8+floor_ind, 3, 1) = 4*(i+1) - 3
        P_mat(8+floor_ind, 3, 2) = 7

        floor_ind = floor_ind + 8
    REPEAT

    P_mat(1+floor_ind, 1, 1) = 4*nz*nx
    P_mat(1+floor_ind, 1, 2) = 0
    P_mat(1+floor_ind, 2, 1) = 4*(nz-1) - 1
    P_mat(1+floor_ind, 2, 2) = 7
    P_mat(1+floor_ind, 3, 1) = 4*nz - 3
    P_mat(1+floor_ind, 3, 2) = 7

    P_mat(2+floor_ind, 1, 1) = 4*(nz-1) - 1
    P_mat(2+floor_ind, 1, 2) = 7
    P_mat(2+floor_ind, 2, 1) = 4*nz*nx
    P_mat(2+floor_ind, 2, 2) = 0
    P_mat(2+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(2+floor_ind, 3, 2) = 7

    P_mat(3+floor_ind, 1, 1) = 4*nz*nx
    P_mat(3+floor_ind, 1, 2) = 0
    P_mat(3+floor_ind, 2, 1) = 1
    P_mat(3+floor_ind, 2, 2) = 8
    P_mat(3+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(3+floor_ind, 3, 2) = 7

    P_mat(4+floor_ind, 1, 1) = 4*nz - 2
    P_mat(4+floor_ind, 1, 2) = 7
    P_mat(4+floor_ind, 2, 1) = 1
    P_mat(4+floor_ind, 2, 2) = 8
    P_mat(4+floor_ind, 3, 1) = 4*nz*nx
    P_mat(4+floor_ind, 3, 2) = 0

    P_mat(5+floor_ind, 1, 1) = 4*nz
    P_mat(5+floor_ind, 1, 2) = 7
    P_mat(5+floor_ind, 2, 1) = 4*(nz-1) - 1
    P_mat(5+floor_ind, 2, 2) = 7
    P_mat(5+floor_ind, 3, 1) = 4*2*nz - 2
    P_mat(5+floor_ind, 3, 2) = 7

    P_mat(6+floor_ind, 1, 1) = 4*nz - 1
    P_mat(6+floor_ind, 1, 2) = 7
    P_mat(6+floor_ind, 2, 1) = 4*2*nz - 2
    P_mat(6+floor_ind, 2, 2) = 7
    P_mat(6+floor_ind, 3, 1) = 1
    P_mat(6+floor_ind, 3, 2) = 8

    floor_ind = floor_ind + 6

    P_mat(1+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(1+floor_ind, 1, 2) = 5
    P_mat(1+floor_ind, 2, 1) = 4*nz - 1
    P_mat(1+floor_ind, 2, 2) = 7
    P_mat(1+floor_ind, 3, 1) = 1
    P_mat(1+floor_ind, 3, 2) = 8  

    P_mat(2+floor_ind, 1, 1) = 4*nz - 1
    P_mat(2+floor_ind, 1, 2) = 7
    P_mat(2+floor_ind, 2, 1) = 4*(1+(nx-1)*nz)
    P_mat(2+floor_ind, 2, 2) = 5
    P_mat(2+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(2+floor_ind, 3, 2) = 8

    P_mat(3+floor_ind, 1, 1) = 4*(1+(nx-1)*nz)
    P_mat(3+floor_ind, 1, 2) = 5
    P_mat(3+floor_ind, 2, 1) = 5
    P_mat(3+floor_ind, 2, 2) = 8
    P_mat(3+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(3+floor_ind, 3, 2) = 8

    P_mat(4+floor_ind, 1, 1) = 2
    P_mat(4+floor_ind, 1, 2) = 8
    P_mat(4+floor_ind, 2, 1) = 5
    P_mat(4+floor_ind, 2, 2) = 8
    P_mat(4+floor_ind, 3, 1) = 4*(1+(nx-1)*nz)
    P_mat(4+floor_ind, 3, 2) = 5

    P_mat(5+floor_ind, 1, 1) = 4
    P_mat(5+floor_ind, 1, 2) = 8
    P_mat(5+floor_ind, 2, 1) = 4*nz - 1
    P_mat(5+floor_ind, 2, 2) = 7
    P_mat(5+floor_ind, 3, 1) = 4*(1+nz) - 2
    P_mat(5+floor_ind, 3, 2) = 8

    P_mat(6+floor_ind, 1, 1) = 3
    P_mat(6+floor_ind, 1, 2) = 8
    P_mat(6+floor_ind, 2, 1) = 4*(1+nz) - 2
    P_mat(6+floor_ind, 2, 2) = 8
    P_mat(6+floor_ind, 3, 1) = 5
    P_mat(6+floor_ind, 3, 2) = 8
END P_comp


SUBROUTINE bar_lambda_comp(ARRAY(*,3) OF REAL bar_lambda_mat^; INTEGER n_int)

    ARRAY(FLOOR(n_int*(n_int+1)/2), 3) OF REAL lambda_mat = 0

    REAL d_lambda = 1.0/(n_int-1)
    REAL lambda_1, lambda_2, lambda_3 = 0

    LOOP FOR i = 0 TO n_int-1
        LOOP FOR j = 0 TO n_int-i-1
            lambda_3 = i*d_lambda
            lambda_2 = j*d_lambda
            lambda_1 = 1.0 - lambda_2 - lambda_3

            lambda_mat(FLOOR(j+i*(2*n_int+1-i)/2+1), 1) = lambda_1
            lambda_mat(FLOOR(j+i*(2*n_int+1-i)/2+1), 2) = lambda_2
            lambda_mat(FLOOR(j+i*(2*n_int+1-i)/2+1), 3) = lambda_3
        REPEAT
    REPEAT

    INTEGER count = 1

    ARRAY(3) OF INTEGER sub_tri_vert_even = (1,     2,   n_int+1)
    ARRAY(3) OF INTEGER sub_tri_vert_odd  = (2, n_int+1, n_int+2)

    LOOP FOR i = 0 TO n_int-2
        LOOP FOR j = 0 TO 2*(n_int-i-1)-2
            IF j MOD 2 = 0 THEN
                bar_lambda_mat(count, 1) = (lambda_mat(sub_tri_vert_even(1) + FLOOR(j/2), 1) + lambda_mat(sub_tri_vert_even(2) + FLOOR(j/2), 1) + lambda_mat(sub_tri_vert_even(3) + FLOOR(j/2), 1)) / 3
                bar_lambda_mat(count, 2) = (lambda_mat(sub_tri_vert_even(1) + FLOOR(j/2), 2) + lambda_mat(sub_tri_vert_even(2) + FLOOR(j/2), 2) + lambda_mat(sub_tri_vert_even(3) + FLOOR(j/2), 2)) / 3
                bar_lambda_mat(count, 3) = (lambda_mat(sub_tri_vert_even(1) + FLOOR(j/2), 3) + lambda_mat(sub_tri_vert_even(2) + FLOOR(j/2), 3) + lambda_mat(sub_tri_vert_even(3) + FLOOR(j/2), 3)) / 3
            ELSE
                bar_lambda_mat(count, 1) = (lambda_mat(sub_tri_vert_odd(1) + FLOOR((j-1)/2), 1) + lambda_mat(sub_tri_vert_odd(2) + FLOOR((j-1)/2), 1) + lambda_mat(sub_tri_vert_odd(3) + FLOOR((j-1)/2), 1)) / 3
                bar_lambda_mat(count, 2) = (lambda_mat(sub_tri_vert_odd(1) + FLOOR((j-1)/2), 2) + lambda_mat(sub_tri_vert_odd(2) + FLOOR((j-1)/2), 2) + lambda_mat(sub_tri_vert_odd(3) + FLOOR((j-1)/2), 2)) / 3
                bar_lambda_mat(count, 3) = (lambda_mat(sub_tri_vert_odd(1) + FLOOR((j-1)/2), 3) + lambda_mat(sub_tri_vert_odd(2) + FLOOR((j-1)/2), 3) + lambda_mat(sub_tri_vert_odd(3) + FLOOR((j-1)/2), 3)) / 3
            END IF
            count = count + 1
        REPEAT
        sub_tri_vert_even(1) = sub_tri_vert_even(1) + n_int - i
        sub_tri_vert_even(2) = sub_tri_vert_even(2) + n_int - i
        sub_tri_vert_even(3) = sub_tri_vert_even(3) + n_int - i - 1

        sub_tri_vert_odd(1) = sub_tri_vert_odd(1) + n_int - i
        sub_tri_vert_odd(2) = sub_tri_vert_odd(2) + n_int - i - 1
        sub_tri_vert_odd(3) = sub_tri_vert_odd(3) + n_int - i - 1
    REPEAT
END bar_lambda_comp

! baric_utils.h

SUBROUTINE bar_coord_2D(ARRAY(3) OF REAL bar_weights^; ARRAY(*) OF REAL position; ARRAY(3,3) OF REAL vert_pos)
    REAL det_T = (vert_pos(1,1)-vert_pos(1,3))*(vert_pos(2,2)-vert_pos(2,3)) - (vert_pos(2,1)-vert_pos(2,3))*(vert_pos(1,2)-vert_pos(1,3))
    bar_weights(1) = ((vert_pos(2,2)-vert_pos(2,3))*(position(1)-vert_pos(1,3)) + (vert_pos(1,3)-vert_pos(1,2))*(position(2)-vert_pos(2,3))) / det_T
    bar_weights(2) = ((vert_pos(2,3)-vert_pos(2,1))*(position(1)-vert_pos(1,3)) + (vert_pos(1,1)-vert_pos(1,3))*(position(2)-vert_pos(2,3))) / det_T
    bar_weights(3) = 1 - bar_weights(1) - bar_weights(2)
END bar_coord_2D

! subroutine aggiunte

SUBROUTINE find_panel(TENSEGRITY this^; ARRAY(*) OF REAL coordinates)
  INTEGER ind = 0
  this.bar_weights(1) = -1
  LOOP WHILE ind >= 0 AND ind <= this.n_P AND ((this.bar_weights(1) < 0 OR this.bar_weights(1) > 1 OR
                                                this.bar_weights(2) < 0 OR this.bar_weights(2) > 1 OR
                                                this.bar_weights(3) < 0 OR this.bar_weights(3) > 1))
    ind = ind + 1

    IF ind = 907 THEN
        WRITE coordinates
    END IF

    this.vert_pos(1,1) = this.X(3*this.P_mat(ind, 1, 1))
    this.vert_pos(2,1) = this.X(3*this.P_mat(ind, 1, 1)-2)
    this.vert_pos(3,1) = this.X(3*this.P_mat(ind, 1, 1)-1)
    this.vert_pos(1,2) = this.X(3*this.P_mat(ind, 2, 1))
    this.vert_pos(2,2) = this.X(3*this.P_mat(ind, 2, 1)-2)
    this.vert_pos(3,2) = this.X(3*this.P_mat(ind, 2, 1)-1)
    this.vert_pos(1,3) = this.X(3*this.P_mat(ind, 3, 1))
    this.vert_pos(2,3) = this.X(3*this.P_mat(ind, 3, 1)-2)
    this.vert_pos(3,3) = this.X(3*this.P_mat(ind, 3, 1)-1)

    CASE this.P_mat(ind, 1, 2) OF
      1: this.vert_pos(1,1) = this.vert_pos(1,1) - this.nz*this.l_per
         this.vert_pos(2,1) = this.vert_pos(2,1) - this.nx*this.l_per
      2: this.vert_pos(1,1) = this.vert_pos(1,1) - this.nz*this.l_per
      3: this.vert_pos(2,1) = this.vert_pos(2,1) - this.nx*this.l_per
      4: this.vert_pos(1,1) = this.vert_pos(1,1) + this.nz*this.l_per
         this.vert_pos(2,1) = this.vert_pos(2,1) - this.nx*this.l_per
      5: this.vert_pos(1,1) = this.vert_pos(1,1) + this.nz*this.l_per
      6: this.vert_pos(1,1) = this.vert_pos(1,1) - this.nz*this.l_per
         this.vert_pos(2,1) = this.vert_pos(2,1) + this.nx*this.l_per
      7: this.vert_pos(2,1) = this.vert_pos(2,1) + this.nx*this.l_per
      8: this.vert_pos(1,1) = this.vert_pos(1,1) + this.nz*this.l_per
         this.vert_pos(2,1) = this.vert_pos(2,1) + this.nx*this.l_per
    END CASE

    CASE this.P_mat(ind, 2, 2) OF
      1: this.vert_pos(1,2) = this.vert_pos(1,2) - this.nz*this.l_per
         this.vert_pos(2,2) = this.vert_pos(2,2) - this.nx*this.l_per
      2: this.vert_pos(1,2) = this.vert_pos(1,2) - this.nz*this.l_per
      3: this.vert_pos(2,2) = this.vert_pos(2,2) - this.nx*this.l_per
      4: this.vert_pos(1,2) = this.vert_pos(1,2) + this.nz*this.l_per
         this.vert_pos(2,2) = this.vert_pos(2,2) - this.nx*this.l_per
      5: this.vert_pos(1,2) = this.vert_pos(1,2) + this.nz*this.l_per
      6: this.vert_pos(1,2) = this.vert_pos(1,2) - this.nz*this.l_per
         this.vert_pos(2,2) = this.vert_pos(2,2) + this.nx*this.l_per
      7: this.vert_pos(2,2) = this.vert_pos(2,2) + this.nx*this.l_per
      8: this.vert_pos(1,2) = this.vert_pos(1,2) + this.nz*this.l_per
         this.vert_pos(2,2) = this.vert_pos(2,2) + this.nx*this.l_per
    END CASE

    CASE this.P_mat(ind, 3, 2) OF
      1: this.vert_pos(1,3) = this.vert_pos(1,3) - this.nz*this.l_per
         this.vert_pos(2,3) = this.vert_pos(2,3) - this.nx*this.l_per
      2: this.vert_pos(1,3) = this.vert_pos(1,3) - this.nz*this.l_per
      3: this.vert_pos(2,3) = this.vert_pos(2,3) - this.nx*this.l_per
      4: this.vert_pos(1,3) = this.vert_pos(1,3) + this.nz*this.l_per
         this.vert_pos(2,3) = this.vert_pos(2,3) - this.nx*this.l_per
      5: this.vert_pos(1,3) = this.vert_pos(1,3) + this.nz*this.l_per
      6: this.vert_pos(1,3) = this.vert_pos(1,3) - this.nz*this.l_per
         this.vert_pos(2,3) = this.vert_pos(2,3) + this.nx*this.l_per
      7: this.vert_pos(2,3) = this.vert_pos(2,3) + this.nx*this.l_per
      8: this.vert_pos(1,3) = this.vert_pos(1,3) + this.nz*this.l_per
         this.vert_pos(2,3) = this.vert_pos(2,3) + this.nx*this.l_per
    END CASE

    bar_coord_2D(this.bar_weights, coordinates, this.vert_pos)
  REPEAT
    
  this.vert_vel_zy(1) = this.X_dot(3*this.P_mat(ind, 1, 1)-1)
  this.vert_vel_zy(2) = this.X_dot(3*this.P_mat(ind, 2, 1)-1)
  this.vert_vel_zy(3) = this.X_dot(3*this.P_mat(ind, 3, 1)-1)

END find_panel

! Modulo

SUBROUTINE readInputFile(TENSEGRITY_INIT this^; STRING fname) FOLLOWS
SUBROUTINE initilizeTensegrity(TENSEGRITY this^; TENSEGRITY_INIT tensegrity_init) FOLLOWS
BOOLEAN FUNCTION isInBody(TENSEGRITY this^; ARRAY(*) OF REAL coordinates) FOLLOWS
BOOLEAN FUNCTION UisInBody(TENSEGRITY this^; ARRAY(*) OF REAL coordinates) FOLLOWS
REAL FUNCTION wbc(TENSEGRITY this^; REAL VARIABLE x,y) FOLLOWS
REAL FUNCTION Uwbc(TENSEGRITY this^; REAL VARIABLE x,y) FOLLOWS

MODULE tensegrity

  SUBROUTINE readInputFile(TENSEGRITY_INIT this^; STRING fname)
	FILE tensegrityin=OPENRO(fname)
    INTEGER nx,nz,n_int,n_tri_int,n_t
    REAL rho_b,k,sigma,h,r
    READ BY NAME FROM tensegrityin nx,nz,n_int,rho_b,k,sigma,h,r

    this.nx    = nx
    this.nz    = nz
    this.n_int = n_int
    this.rho_b = rho_b
    this.k     = k
    this.sigma = sigma
    this.h     = h
    this.r     = r

    this.n_C       = this.nx*this.nz
    this.n_B       = 4*this.nx*this.nz
    this.n_T       = 12*(this.nx-1)*(this.nz-1) - 3*((this.nx-2)*(this.nz-1)+(this.nz-2)*(this.nx-1)) + 3*4 + 3*(this.nx-2) + 3*(this.nz-2) + 4*this.nx*this.nz
    this.n_G       = 2*this.nx + 2*this.nz
    this.n_N       = this.n_C * 8 + this.n_G
    this.n_N_dof   = 3*this.n_N
    this.n_T_dof   = 3*this.n_T
    this.n_q_tilde = 2*2*this.n_B
    this.n_P       = 6*(this.nx+2)*(this.nz+2) + 2*(this.nx+1)*(this.nz+1)
    END readInputFile

  SUBROUTINE initilizeTensegrity(TENSEGRITY this^; TENSEGRITY_INIT tensegrity_init)
    this.rho_b = tensegrity_init.rho_b
    this.k     = tensegrity_init.k
    this.sigma = tensegrity_init.sigma
    this.h     = tensegrity_init.h
    this.r     = tensegrity_init.r

    this.l_b     = SQRT(this.h^2 + (2+SQRT(2))*this.r^2)
    this.I_0     = 1/3 * this.rho_b * this.l_b^3
    this.alpha_1 = ATAN(SQRT(2)-1)
    this.l_per   = (2*this.r) / (COS(this.alpha_1)+SIN(this.alpha_1))
    this.l_v_1   = SQRT(this.h^2 + (2-SQRT(2))*this.r^2)
    this.l_h_1   = SQRT(2)*this.r
    this.l_u_l   = (2-SQRT(2))*this.l_h_1
    this.l_u_s   = this.l_h_1 - this.l_u_l
    this.l_u_l_0 = this.l_u_l / 3
    this.l_h_0   = (2*this.l_u_l_0*this.l_h_1)/(this.l_u_l + this.l_u_l_0)
    this.l_u_s_0 = this.l_h_0 * this.l_u_s / this.l_h_1
    this.l_i_0   = ((this.l_h_1/this.l_h_0-1)/this.r + 1/this.l_v_1)^(-1)

    B_con_comp(this.B_con, tensegrity_init.n_B, tensegrity_init.n_C)
    T_comp(this.T_con, this.ghost_nodes, this.l_0, this.nx, this.nz, this.n_C, this.n_T, this.n_G, this.l_u_s_0, this.l_u_l_0, this.l_i_0)
    LOOP FOR i = 1 TO this.n_P AND j = 1 TO 3 AND k = 1 TO 2
      this.P_mat = 0
    REPEAT
    P_comp(this.P_mat, this.ghost_nodes, this.nx, this.nz, this.n_C, this.n_T,
           this.n_G)
    X_0_comp(this.X_0, this.h, this.r, this.alpha_1, this.l_per, this.nx, this.nz,
             this.n_N, this.n_G, this.n_N_dof, this.ghost_nodes)
    q_0_tilde_comp(this.q_0_tilde, this.X_0, this.B_con, this.l_b, this.n_q_tilde, this.n_B)
    
    this.q_tilde = this.q_0_tilde
    this.X       = this.X_0

    !this.q_tilde_arr(*,1) = this.q_tilde
    LOOP FOR i = 1 TO this.n_q_tilde
        this.q_tilde_arr(i,1) = this.q_tilde(i)
    REPEAT
    this.t_vec(1) = 0
  END initilizeTensegrity


BOOLEAN FUNCTION isInBody(TENSEGRITY this^; ARRAY(*) OF REAL coordinates)
  
    find_panel(this, coordinates)
    !WRITE this.bar_weights, this.vert_pos

  RESULT= coordinates(2+LO)< this.bar_weights(1)*this.vert_pos(3,1) +
                             this.bar_weights(2)*this.vert_pos(3,2) +
                             this.bar_weights(3)*this.vert_pos(3,3)
END isInBody

BOOLEAN FUNCTION UisInBody(TENSEGRITY this^; ARRAY(*) OF REAL coordinates) 
  RESULT= coordinates(2+LO)> 2.261313
END UisInBody

REAL FUNCTION wbc(TENSEGRITY this^; REAL VARIABLE x,y)
  ARRAY(3) OF REAL coordinates = (x,y,0)

  find_panel(this, coordinates)

  RESULT= this.bar_weights(1)*this.vert_vel_zy(1) +
          this.bar_weights(2)*this.vert_vel_zy(2) +
          this.bar_weights(3)*this.vert_vel_zy(3)
END wbc

REAL FUNCTION Uwbc(TENSEGRITY this^; REAL VARIABLE x,y)
  RESULT=0
END Uwbc


END tensegrity
